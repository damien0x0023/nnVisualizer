{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../BarLoader.svelte",
    "../../../Chasing.svelte",
    "../../../Circle.svelte",
    "../../../Circle2.svelte",
    "../../../Circle3.svelte",
    "../../../DoubleBounce.svelte",
    "../../../Firework.svelte",
    "../../../GoogleSpin.svelte",
    "../../../Jellyfish.svelte",
    "../../../Jumper.svelte",
    "../../../Moon.svelte",
    "../../../Pulse.svelte",
    "../../../Rainbow.svelte",
    "../../../RingLoader.svelte",
    "../../../ScaleOut.svelte",
    "../../../Shadow.svelte",
    "../../../SpinLine.svelte",
    "../../../Square.svelte",
    "../../../Stretch.svelte",
    "../../../SyncLoader.svelte",
    "../../../Wave.svelte",
    "../../../Explainer.svelte",
    "../../../Header.svelte",
    "../../../Article.svelte",
    "../../../ActivationAnimator.svelte",
    "../../../Activationview.svelte",
    "../../../ConvolutionAnimator.svelte",
    "../../../Convolutionview.svelte",
    "../../../EmbeddingAnimator.svelte",
    "../../../Embeddingview.svelte",
    "../../../HyperparameterAnimator.svelte",
    "../../../Hyperparameterview.svelte",
    "../../../PoolAnimator.svelte",
    "../../../Poolview.svelte",
    "../../../Sigmoidview.svelte",
    "../../../Softmaxview.svelte",
    "../../../Modal.svelte",
    "../../../Overview.svelte",
    "../../../RNNOverview.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { calculateRgba, range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n  let rgba = calculateRgba(color, 0.2);\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: calc(var(--size) / 15);\r\n    width: calc(var(--size) * 2);\r\n    background-color: var(--rgba);\r\n    position: relative;\r\n    overflow: hidden;\r\n    background-clip: padding-box;\r\n  }\r\n  .lines {\r\n    height: calc(var(--size) / 15);\r\n    background-color: var(--color);\r\n  }\r\n\r\n  .small-lines {\r\n    position: absolute;\r\n    overflow: hidden;\r\n    background-clip: padding-box;\r\n    display: block;\r\n    border-radius: 2px;\r\n    will-change: left, right;\r\n    animation-fill-mode: forwards;\r\n  }\r\n  .small-lines.\\31 {\r\n    animation: 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) 0s infinite normal\r\n      none running long;\r\n  }\r\n  .small-lines.\\32 {\r\n    animation: 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite normal\r\n      none running short;\r\n  }\r\n\r\n  @keyframes long {\r\n    0% {\r\n      left: -35%;\r\n      right: 100%;\r\n    }\r\n    60% {\r\n      left: 100%;\r\n      right: -90%;\r\n    }\r\n    100% {\r\n      left: 100%;\r\n      right: -90%;\r\n    }\r\n  }\r\n  @keyframes short {\r\n    0% {\r\n      left: -200%;\r\n      right: 100%;\r\n    }\r\n    60% {\r\n      left: 107%;\r\n      right: -8%;\r\n    }\r\n    100% {\r\n      left: 107%;\r\n      right: -8%;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --rgba:{rgba}\">\r\n  {#each range(2, 1) as version}\r\n  <div class=\"lines small-lines {version}\" style=\"--color: {color};\"></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { calculateRgba, range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .spinner {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    animation: rotate 2s infinite linear;\r\n  }\r\n  .dot {\r\n    width: 60%;\r\n    height: 60%;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 0;\r\n    background-color: var(--color);\r\n    border-radius: 100%;\r\n    animation: bounce 2s infinite ease-in-out;\r\n  }\r\n\r\n  @keyframes rotate {\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n  @keyframes bounce {\r\n    0%, \r\n    100% { transform: scale(0.0);} \r\n    50% { transform: scale(1.0);}\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  <div class=\"spinner\">\r\n    {#each range(2, 0) as version}\r\n    <div\r\n      class=\"dot\"\r\n      style=\"animation-delay: {(version===1)?'-1.0s': '0s'}; bottom: {(version===1)?'0': ''}; top: {(version===1)?'auto': ''};\"\r\n    ></div>\r\n    {/each}\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .circle {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    border-color: var(--color) transparent var(--color) var(--color);\r\n    border-width: calc(var(--size) / 15);\r\n    border-style: solid;\r\n    border-image: initial;\r\n    border-radius: 50%;\r\n    animation: 0.75s linear 0s infinite normal none running rotate;\r\n  }\r\n  @keyframes rotate {\r\n    0% {\r\n      transform: rotate(0);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n</style>\r\n<div class=\"circle\" style=\"--size: {size}{unit}; --color: {color};\"></div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let unit = \"px\";\r\n  export let colorOuter = \"#FF3E00\";\r\n  export let colorCenter = \"#40B3FF\";\r\n  export let colorInner = \"#676778\";\r\n</script>\r\n\r\n<style>\r\n  .circle {\r\n    width: var(--size);\r\n    height: var(--size);\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    border: 3px solid transparent;\r\n    border-top-color: var(--colorOuter);\r\n    border-radius: 50%;\r\n    animation: circleSpin 2s linear infinite;\r\n  }\r\n  .circle:before,\r\n  .circle:after {\r\n    content: \"\";\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n    border: 3px solid transparent;\r\n    border-radius: 50%;\r\n  }\r\n  .circle:after {\r\n    border-top-color: var(--colorInner);\r\n    top: 9px;\r\n    left: 9px;\r\n    right: 9px;\r\n    bottom: 9px;\r\n    animation: circleSpin 1.5s linear infinite;\r\n  }\r\n  .circle:before {\r\n    border-top-color: var(--colorCenter);\r\n    top: 3px;\r\n    left: 3px;\r\n    right: 3px;\r\n    bottom: 3px;\r\n    animation: circleSpin 3s linear infinite;\r\n  }\r\n  @keyframes circleSpin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"circle\"\r\n  style=\"--size: {size}{unit}; --colorInner: {colorInner}; --colorCenter: {colorCenter}; --colorOuter: {colorOuter}\"\r\n></div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let unit = \"px\";\r\n  export let ballTopLeft = \"#FF3E00\";\r\n  export let ballTopRight = \"#F8B334\";\r\n  export let ballBottomLeft = \"#40B3FF\";\r\n  export let ballBottomRight = \"#676778\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: var(--size);\r\n    height: var(--size);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    line-height: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  .inner {\r\n    transform: scale(calc(var(--floatSize) / 52));\r\n  }\r\n  .ball-container {\r\n    animation: ballTwo 1.5s infinite;\r\n    width: 44px;\r\n    height: 44px;\r\n    flex-shrink: 0;\r\n    position: relative;\r\n  }\r\n  .single-ball {\r\n    width: 44px;\r\n    height: 44px;\r\n    position: absolute;\r\n  }\r\n  .ball {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    animation: ballOne 1.5s infinite ease;\r\n  }\r\n  .ball-top-left {\r\n    background-color: var(--ballTopLeftColor);\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n  .ball-top-right {\r\n    background-color: var(--ballTopRightColor);\r\n    top: 0;\r\n    left: 24px;\r\n  }\r\n  .ball-bottom-left {\r\n    background-color: var(--ballBottomLeftColor);\r\n    top: 24px;\r\n    left: 0;\r\n  }\r\n  .ball-bottom-right {\r\n    background-color: var(--ballBottomRightColor);\r\n    top: 24px;\r\n    left: 24px;\r\n  }\r\n  @keyframes ballOne {\r\n    0% {\r\n      position: absolute;\r\n    }\r\n    50% {\r\n      top: 12px;\r\n      left: 12px;\r\n      position: absolute;\r\n      opacity: 0.5;\r\n    }\r\n    100% {\r\n      position: absolute;\r\n    }\r\n  }\r\n  @keyframes ballTwo {\r\n    0% {\r\n      transform: rotate(0deg) scale(1);\r\n    }\r\n    50% {\r\n      transform: rotate(360deg) scale(1.3);\r\n    }\r\n    100% {\r\n      transform: rotate(720deg) scale(1);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --floatSize: {size}; --ballTopLeftColor: {ballTopLeft}; --ballTopRightColor: {ballTopRight}; --ballBottomLeftColor: {ballBottomLeft}; --ballBottomRightColor: {ballBottomRight}\"\r\n>\r\n  <div class=\"inner\">\r\n    <div class=\"ball-container\">\r\n      <div class=\"single-ball\">\r\n        <div class=\"ball ball-top-left\">&nbsp;</div>\r\n      </div>\r\n      <div class=\"contener_mixte\">\r\n        <div class=\"ball ball-top-right\">&nbsp;</div>\r\n      </div>\r\n      <div class=\"contener_mixte\">\r\n        <div class=\"ball ball-bottom-left\">&nbsp;</div>\r\n      </div>\r\n      <div class=\"contener_mixte\">\r\n        <div class=\"ball ball-bottom-right\">&nbsp;</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .circle {\r\n    position: absolute;\r\n    width: var(--size);\r\n    height: var(--size);\r\n    background-color: var(--color);\r\n    border-radius: 100%;\r\n    opacity: 0.6;\r\n    top: 0;\r\n    left: 0;\r\n    animation-fill-mode: both;\r\n    animation-name: bounce !important;\r\n  }\r\n  @keyframes bounce {\r\n    0%,\r\n    100% {\r\n      transform: scale(0);\r\n    }\r\n    50% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  {#each range(2, 1) as version}\r\n  <div\r\n    class=\"circle\"\r\n    style=\"animation: 2.1s {version === 1 ? `1s` : `0s`} infinite ease-in-out\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    width: calc(var(--size) * 1.3);\r\n    height: calc(var(--size) * 1.3);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .firework {\r\n    border: calc(var(--size) / 10) dotted var(--color);\r\n    width: var(--size);\r\n    height: var(--size);\r\n    border-radius: 50%;\r\n    animation: fire 1.25s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\r\n  }\r\n\r\n  @keyframes fire {\r\n    0% {\r\n      opacity: 1;\r\n      transform: scale(0.1);\r\n    }\r\n    25% {\r\n      opacity: 0.85;\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  <div class=\"firework\"></div>\r\n</div>\r\n",
    "<script>\r\n  export let size = \"40px\";\r\n  $: styles = [`width: ${size}`, `height: ${size}`].join(\";\");\r\n</script>\r\n\r\n<div class=\"spinner spinner--google\" style=\"{styles}\"></div>\r\n\r\n<style>\r\n  * {\r\n    overflow: hidden;\r\n    position: relative;\r\n    text-indent: -9999px;\r\n    display: inline-block;\r\n    background: #f86;\r\n    border-radius: 50%;\r\n    transform: rotateZ(90deg);\r\n    transform-origin: 50% 50%;\r\n    animation: plus-loader-background 3s infinite ease-in-out;\r\n  }\r\n\r\n  *:after {\r\n    background: #f86;\r\n    border-radius: 50% 0 0 50%;\r\n    content: \"\";\r\n    position: absolute;\r\n    right: 50%;\r\n    top: 0;\r\n    width: 50%;\r\n    height: 100%;\r\n    transform-origin: 100% 50%;\r\n    animation: plus-loader-top 3s infinite linear;\r\n  }\r\n\r\n  *:before {\r\n    background: #fc6;\r\n    border-radius: 50% 0 0 50%;\r\n    content: \"\";\r\n    position: absolute;\r\n    right: 50%;\r\n    top: 0;\r\n    width: 50%;\r\n    height: 100%;\r\n    transform-origin: 100% 50%;\r\n    animation: plus-loader-bottom 3s infinite linear;\r\n  }\r\n\r\n  @keyframes plus-loader-top {\r\n    2.5% {\r\n      background: #f86;\r\n      transform: rotateY(0deg);\r\n      animation-timing-function: ease-in;\r\n    }\r\n\r\n    13.75% {\r\n      background: #ff430d;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    13.76% {\r\n      background: #ffae0d;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: ease-out;\r\n    }\r\n\r\n    25% {\r\n      background: #fc6;\r\n      transform: rotateY(180deg);\r\n    }\r\n\r\n    27.5% {\r\n      background: #fc6;\r\n      transform: rotateY(180deg);\r\n      animation-timing-function: ease-in;\r\n    }\r\n\r\n    41.25% {\r\n      background: #ffae0d;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    41.26% {\r\n      background: #2cc642;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: ease-out;\r\n    }\r\n\r\n    50% {\r\n      background: #6d7;\r\n      transform: rotateY(0deg);\r\n    }\r\n\r\n    52.5% {\r\n      background: #6d7;\r\n      transform: rotateY(0deg);\r\n      animation-timing-function: ease-in;\r\n    }\r\n\r\n    63.75% {\r\n      background: #2cc642;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    63.76% {\r\n      background: #1386d2;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: ease-out;\r\n    }\r\n\r\n    75% {\r\n      background: #4ae;\r\n      transform: rotateY(180deg);\r\n    }\r\n\r\n    77.5% {\r\n      background: #4ae;\r\n      transform: rotateY(180deg);\r\n      animation-timing-function: ease-in;\r\n    }\r\n\r\n    91.25% {\r\n      background: #1386d2;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    91.26% {\r\n      background: #ff430d;\r\n      transform: rotateY(90deg);\r\n      animation-timing-function: ease-in;\r\n    }\r\n\r\n    100% {\r\n      background: #f86;\r\n      transform: rotateY(0deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n  }\r\n\r\n  @keyframes plus-loader-bottom {\r\n    0% {\r\n      background: #fc6;\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    50% {\r\n      background: #fc6;\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    75% {\r\n      background: #4ae;\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    100% {\r\n      background: #4ae;\r\n      animation-timing-function: step-start;\r\n    }\r\n  }\r\n\r\n  @keyframes plus-loader-background {\r\n    0% {\r\n      background: #f86;\r\n      transform: rotateZ(180deg);\r\n    }\r\n\r\n    25% {\r\n      background: #f86;\r\n      transform: rotateZ(180deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    27.5% {\r\n      background: #6d7;\r\n      transform: rotateZ(90deg);\r\n    }\r\n\r\n    50% {\r\n      background: #6d7;\r\n      transform: rotateZ(90deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    52.5% {\r\n      background: #6d7;\r\n      transform: rotateZ(0deg);\r\n    }\r\n\r\n    75% {\r\n      background: #6d7;\r\n      transform: rotateZ(0deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n\r\n    77.5% {\r\n      background: #f86;\r\n      transform: rotateZ(270deg);\r\n    }\r\n\r\n    100% {\r\n      background: #f86;\r\n      transform: rotateZ(270deg);\r\n      animation-timing-function: step-start;\r\n    }\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .ring {\r\n    position: absolute;\r\n    border: 2px solid var(--color);\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n    animation: motion 2.5s ease infinite;\r\n  }\r\n  @keyframes motion {\r\n    0% {\r\n      transform: translateY(var(--motionOne));\r\n    }\r\n    50% {\r\n      transform: translateY(var(--motionTwo));\r\n    }\r\n    100% {\r\n      transform: translateY(var(--motionThree));\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --color: {color}; --motionOne: {-size/5}{unit}; --motionTwo: {size/4}{unit}; --motionThree: {-size/5}{unit}\"\r\n>\r\n  {#each range(6, 0) as version}\r\n  <div\r\n    class=\"ring\"\r\n    style=\"animation-delay: {version * 100}ms; width: {version * (size / 6)+unit}; height: {version * (size / 6) / 2+unit}; \"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .circle {\r\n    border-radius: 100%;\r\n    animation-fill-mode: both;\r\n    position: absolute;\r\n    opacity: 0;\r\n    width: var(--size);\r\n    height: var(--size);\r\n    background-color: var(--color);\r\n    animation: bounce 1s linear infinite;\r\n  }\r\n  @keyframes bounce {\r\n    0% {\r\n      opacity: 0;\r\n      transform: scale(0);\r\n    }\r\n    5% {\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  {#each range(3, 1) as version}\r\n  <div\r\n    class=\"circle\"\r\n    style=\"animation-delay: {(version === 1) ? `0s` : (version === 2) ? `0.33333s` : (version === 3) ? `0.66666s`: `0s`}\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n  let moonSize = size / 7;\r\n  let top = size / 2 - moonSize / 2;\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    border-radius: 100%;\r\n    animation: moonStretchDelay 0.6s 0s infinite linear;\r\n    animation-fill-mode: forwards;\r\n    position: relative;\r\n  }\r\n  .circle-one {\r\n    top: var(--moonSize);\r\n    background-color: var(--color);\r\n    width: calc(var(--size) / 7);\r\n    height: calc(var(--size) / 7);\r\n    border-radius: 100%;\r\n    animation: moonStretchDelay 0.6s 0s infinite linear;\r\n    animation-fill-mode: forwards;\r\n    opacity: 0.8;\r\n    position: absolute;\r\n  }\r\n  .circle-two {\r\n    opacity: 0.1;\r\n    border: calc(var(--size) / 7) solid var(--color);\r\n    height: var(--size);\r\n    width: var(--size);\r\n    border-radius: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  @keyframes moonStretchDelay {\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --color: {color}; --moonSize: {top}{unit}\"\r\n>\r\n  <div class=\"circle-one\"></div>\r\n  <div class=\"circle-two\"></div>\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: var(--size);\r\n    height: calc(var(--size) / 2.5);\r\n  }\r\n  .cube {\r\n    position: absolute;\r\n    top: 0px;\r\n    width: calc(var(--size) / 5);\r\n    height: calc(var(--size) / 2.5);\r\n    background-color: var(--color);\r\n    animation: motion 1.5s cubic-bezier(0.895, 0.03, 0.685, 0.22) infinite;\r\n  }\r\n  @keyframes motion {\r\n    0% {\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  {#each range(3, 0) as version}\r\n  <div\r\n    class=\"cube\"\r\n    style=\"animation-delay: {version * .15}s; left: {version * (size / 3 + size / 15)+unit};\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: var(--size);\r\n    height: calc(var(--size) / 2);\r\n    overflow: hidden;\r\n  }\r\n  .rainbow {\r\n    width: var(--size);\r\n    height: var(--size);\r\n    border-left-color: transparent;\r\n    border-bottom-color: transparent;\r\n    border-top-color: var(--color);\r\n    border-right-color: var(--color);\r\n    box-sizing: border-box;\r\n    transform: rotate(-200deg);\r\n    border-radius: 50%;\r\n    border-style: solid;\r\n    animation: 3s ease-in-out 0s infinite normal none running rotate;\r\n  }\r\n  @keyframes rotate {\r\n    0% {\r\n      border-width: 10px;\r\n    }\r\n    25% {\r\n      border-width: 3px;\r\n    }\r\n    50% {\r\n      transform: rotate(115deg);\r\n      border-width: 10px;\r\n    }\r\n    75% {\r\n      border-width: 3px;\r\n    }\r\n    100% {\r\n      border-width: 10px;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  <div class=\"rainbow\"></div>\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .border {\r\n    border-color: var(--color);\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    width: var(--size);\r\n    height: var(--size);\r\n    opacity: 0.4;\r\n    perspective: 800px;\r\n    border-width: 6px;\r\n    border-style: solid;\r\n    border-image: initial;\r\n    border-radius: 100%;\r\n  }\r\n  .border.\\31 {\r\n    animation: 2s linear 0s infinite normal none running ringOne;\r\n  }\r\n  .border.\\32 {\r\n    animation: 2s linear 0s infinite normal none running ringTwo;\r\n  }\r\n\r\n  @keyframes ringOne {\r\n    0% {\r\n      transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);\r\n    }\r\n    100% {\r\n      transform: rotateX(360deg) rotateY(180deg) rotateZ(360deg);\r\n    }\r\n  }\r\n  @keyframes ringTwo {\r\n    0% {\r\n      transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);\r\n    }\r\n    100% {\r\n      transform: rotateX(180deg) rotateY(360deg) rotateZ(360deg);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  {#each range(2, 1) as version}\r\n  <div class=\"border {version}\"></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let duration = \"1.0s\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .circle {\r\n    width: var(--size);\r\n    height: var(--size);\r\n    background-color: var(--color);\r\n    animation-duration: var(--duration);\r\n    border-radius: 100%;\r\n    display: inline-block;\r\n    animation: scaleOut 1s ease-in-out infinite;\r\n  }\r\n  @keyframes scaleOut {\r\n    0% {\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n</style>\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --color: {color}; --duration: {duration}\"\r\n>\r\n  <div class=\"circle\"></div>\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: var(--size);\r\n    height: var(--size);\r\n  }\r\n  .shadow {\r\n    color: var(--color);\r\n    font-size: var(--size);\r\n    overflow: hidden;\r\n    width: var(--size);\r\n    height: var(--size);\r\n    border-radius: 50%;\r\n    margin: 28px auto;\r\n    position: relative;\r\n    transform: translateZ(0);\r\n    animation: load 1.7s infinite ease, round 1.7s infinite ease;\r\n  }\r\n  @keyframes load {\r\n    0% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\r\n    }\r\n    5%,\r\n    95% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\r\n    }\r\n    10%,\r\n    59% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em,\r\n        -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em,\r\n        -0.297em -0.775em 0 -0.477em;\r\n    }\r\n    20% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em,\r\n        -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em,\r\n        -0.749em -0.34em 0 -0.477em;\r\n    }\r\n    38% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em,\r\n        -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em,\r\n        -0.82em -0.09em 0 -0.477em;\r\n    }\r\n    100% {\r\n      box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;\r\n    }\r\n  }\r\n  @keyframes round {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  <div class=\"shadow\"></div>\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n  export let stroke = parseInt(size / 12) + unit;\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    width: var(--size);\r\n    height: var(--stroke);\r\n    transform: scale(calc(var(--floatSize) / 75));\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .line {\r\n    width: var(--size);\r\n    height: var(--stroke);\r\n    background: var(--color);\r\n    border-radius: var(--stroke);\r\n    transform-origin: center center;\r\n    animation: spineLine 4s ease infinite;\r\n  }\r\n  @keyframes spineLine {\r\n    0% {\r\n      transform: rotate(-20deg);\r\n      height: 5px;\r\n      width: 75px;\r\n    }\r\n    5% {\r\n      height: 5px;\r\n      width: 75px;\r\n    }\r\n    30% {\r\n      transform: rotate(380deg);\r\n      height: 5px;\r\n      width: 75px;\r\n    }\r\n    40% {\r\n      transform: rotate(360deg);\r\n      height: 5px;\r\n      width: 75px;\r\n    }\r\n    55% {\r\n      transform: rotate(0deg);\r\n      height: 5px;\r\n      width: 5px;\r\n    }\r\n    65% {\r\n      transform: rotate(0deg);\r\n      height: 5px;\r\n      width: 85px;\r\n    }\r\n    68% {\r\n      transform: rotate(0deg);\r\n      height: 5px;\r\n    }\r\n    75% {\r\n      transform: rotate(0deg);\r\n      height: 5px;\r\n      width: 1px;\r\n    }\r\n    78% {\r\n      height: 5px;\r\n      width: 5px;\r\n    }\r\n    90% {\r\n      height: 5px;\r\n      width: 75px;\r\n      transform: rotate(0deg);\r\n    }\r\n    99%,\r\n    100% {\r\n      height: 5px;\r\n      width: 75px;\r\n      transform: rotate(-20deg);\r\n    }\r\n  }\r\n</style>\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --color: {color}; --stroke: {stroke}; --floatSize: {size}\"\r\n>\r\n  <div class=\"line\"></div>\r\n</div>\r\n",
    "<script>\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .square {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    background-color: var(--color);\r\n    animation: squareDelay 3s 0s infinite cubic-bezier(0.09, 0.57, 0.49, 0.9);\r\n    animation-fill-mode: both;\r\n    perspective: 100px;\r\n    display: inline-block;\r\n  }\r\n  @keyframes squareDelay {\r\n    25% {\r\n      -webkit-transform: rotateX(180deg) rotateY(0);\r\n      transform: rotateX(180deg) rotateY(0);\r\n    }\r\n    50% {\r\n      -webkit-transform: rotateX(180deg) rotateY(180deg);\r\n      transform: rotateX(180deg) rotateY(180deg);\r\n    }\r\n    75% {\r\n      -webkit-transform: rotateX(0) rotateY(180deg);\r\n      transform: rotateX(0) rotateY(180deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotateX(0) rotateY(0);\r\n      transform: rotateX(0) rotateY(0);\r\n    }\r\n  }\r\n</style>\r\n<div class=\"square\" style=\"--size: {size}{unit}; --color: {color}\"></div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let duration = \"1.2s\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    display: inline-block;\r\n    text-align: center;\r\n    font-size: 10px;\r\n  }\r\n  .rect {\r\n    height: 100%;\r\n    width: 10%;\r\n    display: inline-block;\r\n    margin-right: 4px;\r\n    background-color: var(--color);\r\n    animation: stretch var(--duration) ease-in-out infinite;\r\n  }\r\n  @keyframes stretch {\r\n    0%,\r\n    40%,\r\n    100% {\r\n      transform: scaleY(0.4);\r\n    }\r\n    20% {\r\n      transform: scaleY(1);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"wrapper\"\r\n  style=\"--size: {size}{unit}; --color: {color}; --duration: {duration}\"\r\n>\r\n  {#each range(5, 1) as version}\r\n  <div\r\n    class=\"rect\"\r\n    style=\"animation-delay: {version === 2 ? '-1.1s' : version === 3 ? '-1s' : version === 4 ? '-0.9s' : version === 5 ? '-0.8s': ''}\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n\r\n<style>\r\n  .wrapper {\r\n    height: var(--size);\r\n    width: var(--size);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .dot {\r\n    height: var(--dotSize);\r\n    width: var(--dotSize);\r\n    background-color: var(--color);\r\n    margin: 2px;\r\n    display: inline-block;\r\n    border-radius: 100%;\r\n    animation: sync 0.6s ease-in-out infinite alternate both running;\r\n  }\r\n\r\n  @-webkit-keyframes sync {\r\n    33% {\r\n      -webkit-transform: translateY(10px);\r\n      transform: translateY(10px);\r\n    }\r\n    66% {\r\n      -webkit-transform: translateY(-10px);\r\n      transform: translateY(-10px);\r\n    }\r\n    100% {\r\n      -webkit-transform: translateY(0);\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n  @keyframes sync {\r\n    33% {\r\n      -webkit-transform: translateY(10px);\r\n      transform: translateY(10px);\r\n    }\r\n    66% {\r\n      -webkit-transform: translateY(-10px);\r\n      transform: translateY(-10px);\r\n    }\r\n    100% {\r\n      -webkit-transform: translateY(0);\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"wrapper\" style=\"--size:{size}{unit}\">\r\n  {#each range(3, 1) as i}\r\n  <div\r\n    class=\"dot\"\r\n    style=\"--dotSize:{size * 0.25}{unit}; --color:{color}; animation-delay:  {i * 0.07}s;\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { range } from \"./utils\";\r\n  export let size = 60;\r\n  export let color = \"#FF3E00\";\r\n  export let unit = \"px\";\r\n</script>\r\n<style>\r\n  .wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: calc(var(--size) * 2.5);\r\n    height: var(--size);\r\n    overflow: hidden;\r\n  }\r\n  .bar {\r\n    position: absolute;\r\n    top: calc(var(--size) / 10);\r\n    width: calc(var(--size) / 5);\r\n    height: calc(var(--size) / 10);\r\n    margin-top: calc(var(--size) - var(--size) / 10);\r\n    transform: skewY(0deg);\r\n    background-color: var(--color);\r\n    animation: motion 1.25s ease-in-out infinite;\r\n  }\r\n  @keyframes motion {\r\n    25% {\r\n      transform: skewY(25deg);\r\n    }\r\n    50% {\r\n      height: 100%;\r\n      margin-top: 0;\r\n    }\r\n    75% {\r\n      transform: skewY(-25deg);\r\n    }\r\n  }\r\n</style>\r\n<div class=\"wrapper\" style=\"--size: {size}{unit}; --color: {color}\">\r\n  {#each range(10, 0) as version}\r\n  <div\r\n    class=\"bar\"\r\n    style=\"left: {version * (size / 5 + (size / 15 - size / 100))+unit}; animation-delay: {version * 0.15}s;\"\r\n  ></div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\n  import Overview from './overview/Overview.svelte';\n  import RNNOverview from './overview/RNNOverview.svelte';\n\n  export let nn;\n\n  // Enum to control the displaying view\n  const View = {\n    OVERVIEW: 'overview',\n    LAYERVIEW: 'layerview',\n    DETAILVIEW: 'detailview'\n  };\n\n  let mainView = View.OVERVIEW;\n\n\n  /* Example to read loaded cnn in other components:\n  $: if ( $cnnStore.length != 0) {\n    console.log($cnnStore);\n  }\n  */\n\n</script>\n \n<style>\n#explainer {\n  width: 100%;\n  padding: 0;\n  margin: auto;\n  outline: 1px solid var(--g-dark-gray);\n}\n</style>\n\n<div id='explainer'>\n  {#if nn===\"CNN\"}\n    <Overview />\n  {:else if nn===\"RNN\"}\n    <RNNOverview />\n  {/if}\n</div>",
    "<script>\n\t// let NNs= [\n\t// \t{id: 1, name: `Convolutional Neural Network`, alis: `CNN`},\n\t// \t{id: 2, name: `Recurrent Neural Network`, alis: `RNN`}\n\t// ];\n\n\t// export  let defaultNN;\n\t// let selected = defaultNN && defaultNN==='rnn'?NNs[1]: NNs[0];\n\n\t// function handleChanged(){\n\t// \talert(`answer question ${selected.id} (${selected.alis}) with \"${selected.name}\"`);\n\t// }\n\n\texport let NNs;\n\texport let selectedNN;\n\t\n\n</script>\n\n<style>\n\t#header {\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\tpadding: 0 20px;\n\t\talign-items: stretch;\n\t\tbackground: rgb(0, 120, 174);\n    \tjustify-content: space-between;\n\t}\n\n\t#logo {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t#logo-text {\n\t\tfont-size: 25px;\n\t\tcolor: var(--light-gray);\n\t\tfont-family: 'A Love of Thunder';\n\t\tdominant-baseline: baseline;\n\t\tmargin-right: 10px;\n\t\ttext-align: left;\n        /* border: 1px dotted black; */\n        width: 25%;\n\n\t}\n\n\t.logo-svg{\n\t\twidth:50%;\n\t\theight:35px;\n\t\ttext-align: center;\n        /* border: 1px dotted black; */\n\t}\n\n\t.svg-logo{\n\t\t/* display:inline-block; */\n\t\ttext-align: center;\n\t}\n\n\t#svg-logo-tagline {\n\t\tfont-size: 22px;\n\t\tfill: rgb(255, 255, 255);\n\t\ttext-align: center;\n\t\twidth: 50%;\n\t\tfont-family: 'Neucha';\n\t}\n\n\t.icons {\n\t\tdisplay: flex;\n\t\tjustify-content: flex-start;\n\t\talign-items: center;\n\t}\n\n\t.icon {\n\t\twidth: 27px;\n\t\theight: 27px;\n\t\tmargin-left: 15px;\n\t}\n\n\t.icon a{\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.icon img {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n\t}\n\n\t.is-very-small {\n    font-size: 12px;\n  \t}\n\n\t.control {\n        text-align: right;\n        /* border: 1px dotted black; */\n        width: 25%;\n\t}\n\t.control > .select > #NN-select {\n    padding-left: 1em;\n    padding-right: 0.5em;\n  \t}\n\n  \t.NNselector {\n\t\t/* display: flex; */\n\t\t/* justify-content: flex-start; */\n\t\t/* align-items: center; */\n\t    display: flex;\n\t\tposition: relative;\n\t\tflex-direction: column;\n\t\tjustify-content: space-between;\n\t\talign-items: flex-start;\n\t}\n\t\n</style>\n\n<div id=\"header\">\n\t<div id=\"logo\">\n\t\t<div id=\"logo-text\">\n\t\t\t{selectedNN.alis} Explainer\n    \t</div>\n\n\t\t<svg class=\"logo-svg\">\n\t\t\t<defs>\n\t\t\t\t<filter x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" filterUnits=\"objectBoundingBox\" id=\"chalk-texture\">\n\t\t\t\t\t<feTurbulence type=\"fractalNoise\" baseFrequency=\"2\" numOctaves=\"5\" stitchTiles=\"stitch\" result=\"f1\">\n\t\t\t\t\t</feTurbulence>\n\t\t\t\t\t<feColorMatrix type=\"matrix\" values=\"0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5\" result=\"f2\">\n\t\t\t\t\t</feColorMatrix>\n\t\t\t\t\t<feComposite operator=\"in\" in2=\"f2\" in=\"SourceGraphic\" result=\"f3\">\n\t\t\t\t\t</feComposite>\n\t\t\t\t</filter>\n\t\t\t</defs>\n\n\t\t\t<g class=\"svg-logo\" filter=\"url(#chalk-texture)\" >\t\t\t\t\n\t\t\t\t<text id=\"svg-logo-tagline\" x=20% y=80%>\n\t\t\t\t\tLearn {selectedNN.name} ({selectedNN.alis}) in your browser!\n\t\t\t\t</text>\n\t\t\t</g>\n\t\t</svg>\n\t\t\n\t\t<div class = \"control is-very-small has-icons-left\" title=\"Change NN\">\n\t\t\t<span class=\"icon is-right\">\n\t\t\t\t<i class=\"fas fa-bezier-curve\"></i>\n\t\t\t</span>\n\t\n\t\t\t<div class = \"select\">\n\t\t\t\t<div id=\"NN-select\">\n\t\t\t\t\t<select bind:value={selectedNN} class=\"NNselector\">\n\t\t\t\t\t\t\t{#each NNs as NN}\n\t\t\t\t\t\t\t\t<option value={NN}>\n\t\t\t\t\t\t\t\t\t{NN.alis}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\n\t\t</div>\n  \t</div>\n\n\n\n\t<!-- <p>{selectedNN.alis}</p> -->\n\n\t<!-- <div class=\"icons\">\n\t\n\t\t<div class=\"icon\" title=\"Research paper\">\n\t\t\t<a target=\"_blank\" href=\"http://zijie.wang/redirect/cnn-explainer/\">\n\t\t\t\t<img src=\"PUBLIC_URL/assets/img/pdf.png\" alt=\"pdf icon\"/>\n\t\t\t</a>\n\t\t</div>\n\n\t\t<div class=\"icon\" title=\"Demo video\">\n\t\t\t<a target=\"_blank\" href=\"https://youtu.be/HnWIHWFbuUQ\">\n\t\t\t\t<img src=\"PUBLIC_URL/assets/img/youtube.png\" alt=\"youtube icon\"/>\n\t\t\t</a>\n\t\t</div>\n\n\t\t<div class=\"icon\" title=\"Open-source code\">\n\t\t\t<a target=\"_blank\" href=\"https://github.com/poloclub/cnn-explainer\">\n\t\t\t\t<img src=\"PUBLIC_URL/assets/img/github.png\" alt=\"github icon\"/>\n\t\t\t</a>\n\t\t</div>\n\t</div> -->\n</div>",
    "<script>\n\timport HyperparameterView from '../detail-view/Hyperparameterview.svelte';\n  import Youtube from './Youtube.svelte';\n\n\tlet softmaxEquation = `$$\\\\text{Softmax}(x_{i}) = \\\\frac{\\\\exp(x_i)}{\\\\sum_j \\\\exp(x_j)}$$`;\n\tlet reluEquation = `$$\\\\text{ReLU}(x) = \\\\max(0,x)$$`;\n\n  let currentPlayer;\n</script>\n\n<style>\n\t#description {\n    margin-bottom: 60px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 78ch;\n  }\n\n  #description h2 {\n    color: #444;\n    font-size: 40px;\n    font-weight: 450;\n    margin-bottom: 12px;\n    margin-top: 60px;\n  }\n\n  #description h4 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description h6 {\n    color: #444;\n    font-size: 24px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description p {\n    margin: 16px 0;\n  }\n\n  #description p img {\n    vertical-align: middle;\n  }\n\n  #description .figure-caption {\n    font-size: 13px;\n    margin-top: 5px;\n  }\n\n  #description ol {\n    margin-left: 40px;\n  }\n\n  #description p, \n  #description div,\n  #description li {\n    color: #555;\n    font-size: 17px;\n    line-height: 1.6;\n  }\n\n  #description small {\n    font-size: 12px;\n  }\n\n  #description ol li img {\n    vertical-align: middle;\n  }\n\n  #description .video-link {\n    color: #3273DC;\n    cursor: pointer;\n    font-weight: normal;\n    text-decoration: none;\n  }\n\n  #description ul {\n      list-style-type: disc;\n      margin-top: -10px;\n      margin-left: 40px;\n      margin-bottom: 15px;\n  }\n    \n  #description a:hover, \n  #description .video-link:hover {\n    text-decoration: underline;\n  }\n\n  .figure, .video {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n</style>\n\n<body>\n  <div id=\"description\">\n    <h2>What is a Convolutional Neural Network?</h2>\n    <p>\n\t\tIn machine learning, a classifier assigns a class label to a data point.  For example, an <em>image classifier</em> produces a class label (e.g, bird, plane) for what objects exist within an image.  A <em>convolutional neural network</em>, or CNN for short, is a type of classifier, which excels at solving this problem!\n\t </p>\n  \t<p>\n  \t\tA CNN is a neural network: an algorithm used to recognize patterns in data. Neural Networks in general are composed of a collection of neurons that are organized in layers, each with their own learnable weights and biases.  Let’s break down a CNN into its basic building blocks.\n  \t</p>\n  \t<ol>\n  \t\t<li>A <strong>tensor</strong> can be thought of as an n-dimensional matrix.  In the CNN above, tensors will be 3-dimensional with the exception of the output layer.</li>\n  \t\t<li>A <strong>neuron</strong> can be thought of as a function that takes in multiple inputs and yields a single output.  The outputs of neurons are represented above as the <span style=\"color:#FF7577;\">red</span> &rarr; <span style=\"color:#60A7D7;\">blue</span> <strong>activation maps</strong>.</li>\n  \t\t<li>A <strong>layer</strong> is simply a collection of neurons with the same operation, including the same hyperparameters.</li>\n  \t\t<li><strong>Kernel weights and biases</strong>, while unique to each neuron, are tuned during the training phase, and allow the classifier to adapt to the problem and dataset provided.  They are encoded in the visualization with a <span style=\"color:#BC8435;\">yellow</span> &rarr; <span style=\"color:#39988F;\">green</span> diverging colorscale.  The specific values can be viewed in the <em>Interactive Formula View</em> by clicking a neuron or by hovering over the kernel/bias in the <em>Convolutional Elastic Explanation View</em>.</li>\n  \t\t<li>A CNN conveys a <strong>differentiable score function</strong>, which is represented as <strong>class scores</strong> in the visualization on the output layer.</li>\n  \t</ol> \n  \t<p>\n  \t\tIf you have studied neural networks before, these terms may sound familiar to you.  So what makes a CNN different? CNNs utilize a special type of layer, aptly named a convolutional layer, that makes them well-positioned to learn from image and image-like data.  Regarding image data, CNNs can be used for many different computer vision tasks, such as <a href=\"http://ijcsit.com/docs/Volume%207/vol7issue5/ijcsit20160705014.pdf\" title=\"CNN Applications\">image processing, classification, segmentation, and object detection</a>.\n  \t</p>  \n  \t<p>\n  \t\tIn CNN Explainer, you can see how a simple CNN can be used for image classification.  Because of the network’s simplicity, its performance isn’t perfect, but that’s okay! The network architecture, <a href=\"http://cs231n.stanford.edu/\" title=\"Tiny VGG Net presented by Stanford's CS231n\">Tiny VGG</a>, used in CNN Explainer contains many of the same layers and operations used in state-of-the-art CNNs today, but on a smaller scale.  This way, it will be easier to understand getting started.\n      </p>     \n\n      <h2>What does each layer of the network do?</h2>\n      <p>\n  \t\tLet’s walk through each layer in the network.  Feel free to interact with the visualization above by clicking and hovering over various parts of it as you read. \n      </p>\n      <h4 id='article-input'>Input Layer</h4>\n      <p>\n      \tThe input layer (leftmost layer) represents the input image into the CNN.  Because we use RGB images as input, the input layer has three channels, corresponding to the red, green, and blue channels, respectively, which are shown in this layer. Use the color scale when you click on the <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> icon above to display detailed information (on this layer, and others).\n      </p>\n      <h4 id='article-convolution'>Convolutional Layers</h4>\n      <p>\n  \t\tThe convolutional layers are the foundation of CNN, as they contain the learned kernels (weights), which extract features that distinguish different images from one another&mdash;this is what we want for classification!  As you interact with the convolutional layer, you will notice links between the previous layers and the convolutional layers.  Each link represents a unique kernel, which is used for the convolution operation to produce the current convolutional neuron’s output or activation map.  \n  \t</p>\n  \t<p>\n  \t\tThe convolutional neuron performs an elementwise dot product with a unique kernel and the output of the previous layer’s corresponding neuron.  This will yield as many intermediate results as there are unique kernels.  The convolutional neuron is the result of all of the intermediate results summed together with the learned bias.\n  \t</p>\n  \t<p>\n  \t\tFor example, let’s look at the first convolutional layer in the Tiny VGG architecture above.  Notice that there are 10 neurons in this layer, but only 3 neurons in the previous layer.  In the Tiny VGG architecture, convolutional layers are fully-connected, meaning each neuron is connected to every other neuron in the previous layer.  Focusing on the output of the topmost convolutional neuron from the first convolutional layer, we see that there are 3 unique kernels when we hover over the activation map.  \n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_overview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" width=60% height=60% align=\"middle\"/>\n      <div class=\"figure-caption\">\n  \t\t  Figure 1.  As you hover over the activation map of the topmost node from the first convolutional layer, you can see that 3 kernels were applied to yield this activation map.  After clicking this activation map, you can see the convolution operation occuring with each unique kernel.\n  \t  </div>\n    </div>\n\n  \t<p>\n  \t\tThe size of these kernels is a hyper-parameter specified by the designers of the network architecture.  In order to produce the output of the convolutional neuron (activation map), we must perform an elementwise dot product with the output of the previous layer and the unique kernel learned by the network.  In TinyVGG, the dot product operation uses a stride of 1, which means that the kernel is shifted over 1 pixel per dot product, but this is a hyperparameter that the network architecture designer can adjust to better fit their dataset.  We must do this for all 3 kernels, which will yield 3 intermediate results.  \n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_detailedview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" />\n      <div class=\"figure-caption\">\n        Figure 2. The kernel being applied to yield the topmost intermediate result for the discussed activation map.\n      </div>\n    </div>\n  \t<p>\n  \t\tThen, an elementwise sum is performed containing all 3 intermediate results along with the bias the network has learned.  After this, the resulting 2-dimensional tensor will be the activation map viewable on the interface above for the topmost neuron in the first convolutional layer.  This same operation must be applied to produce each neuron’s activation map.\n  \t</p>\n  \t<p>\n  \t\tWith some simple math, we are able to deduce that there are 3 x 10 = 30 unique kernels, each of size 3x3, applied in the first convolutional layer.  The connectivity between the convolutional layer and the previous layer is a design decision when building a network architecture, which will affect the number of kernels per convolutional layer.  Click around the visualization to better understand the operations behind the convolutional layer.  See if you can follow the example above!\n    </p>\n    <h6>Understanding Hyperparameters</h6>\n    <p>\n    \t<HyperparameterView/>\n    </p>\n    <ol>\n    \t<li><strong>Padding</strong> is often necessary when the kernel extends beyond the activation map.  Padding conserves data at the borders of activation maps, which leads to better performance, and it can help <a href=\"https://arxiv.org/pdf/1603.07285.pdf\" title=\"See page 13\">preserve the input's spatial size</a>, which allows an architecture designer to build depper, higher performing networks.  There exist <a href=\"https://arxiv.org/pdf/1811.11718.pdf\" title=\"Outlines major padding techniques\">many padding techniques</a>, but the most commonly used approach is zero-padding because of its performance, simplicity, and computational efficiency.  The technique involves adding zeros symmetrically around the edges of an input.  This approach is adopted by many high-performing CNNs such as <a href=\"https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf\" title=\"AlexNet\">AlexNet</a>.</li>\n    \t<li><strong>Kernel size</strong>, often also referred to as filter size, refers to the dimensions of the sliding window over the input.  Choosing this hyperparameter has a massive impact on the image classification task.  For example, small kernel sizes are able to extract a much larger amount of information containing highly local features from the input.  As you can see on the visualization above, a smaller kernel size also leads to a smaller reduction in layer dimensions, which allows for a deeper architecture.  Conversely, a large kernel size extracts less information, which leads to a faster reduction in layer dimensions, often leading to worse performance.  Large kernels are better suited to extract features that are larger.  At the end of the day, choosing an appropriate kernel size will be dependent on your task and dataset, but generally, smaller kernel sizes lead to better performance for the image classification task because an architecture designer is able to stack <a href=\"https://arxiv.org/pdf/1409.1556.pdf\" title=\"Learn why deeper networks perform better!\">more and more layers together to learn more and more complex features</a>!</li>\n    \t<li><strong>Stride</strong> indicates how many pixels the kernel should be shifted over at a time.  For example, as described in the convolutional layer example above, Tiny VGG uses a stride of 1 for its convolutional layers, which means that the dot product is performed on a 3x3 window of the input to yield an output value, then is shifted to the right by one pixel for every subsequent operation.  The impact stride has on a CNN is similar to kernel size.  As stride is decreased, more features are learned because more data is extracted, which also leads to larger output layers.  On the contrary, as stride is increased, this leads to more limited feature extraction and smaller output layer dimensions.  One responsibility of the architecture designer is to ensure that the kernel slides across the input symmetrically when implementing a CNN.  Use the hyperparameter visualization above to alter stride on various input/kernel dimensions to understand this constraint!</li>\n    </ol>\n    <h4>Activation Functions</h4>\n    <h6 id='article-relu'>ReLU</h6>\n    <p>\n    \tNeural networks are extremely prevalent in modern technology&mdash;because they are so accurate!  The highest performing CNNs today consist of an absurd amount of layers, which are able to learn more and more features.  Part of the reason these groundbreaking CNNs are able to achieve such <a href=\"https://arxiv.org/pdf/1512.03385.pdf\" title=\"ResNet\">tremendous accuracies</a> is because of their non-linearity.  ReLU applies much-needed non-linearity into the model.  Non-linearity is necessary to produce non-linear decision boundaries, so that the output cannot be written as a linear combination of the inputs.  If a non-linear activation function was not present, deep CNN architectures would devolve into a single, equivalent convolutional layer, which would not perform nearly as well.  The ReLU activation function is specifically used as a non-linear activation function, as opposed to other non-linear functions such as <em>Sigmoid</em> because it has been <a href=\"https://arxiv.org/pdf/1906.01975.pdf\" title=\"See page 29\">empirically observed</a> that CNNs using ReLU are faster to train than their counterparts.\n    </p>\n    <p>\n  \tThe ReLU activation function is a one-to-one mathematical operation: {reluEquation}\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/relu_graph.svg\" alt=\"relu graph\" width=\"30%\" height=\"30%\"/>\n      <div class=\"figure-caption\">\n        Figure 3. The ReLU activation function graphed, which disregards all negative data.\n      </div>\n    </div>\n    <p>\n  \tThis activation function is applied elementwise on every value from the input tensor.  For example, if applied ReLU on the value 2.24, the result would be 2.24, since 2.24 is larger than 0.  You can observe how this activation function is applied by clicking a ReLU neuron in the network above.  The Rectified Linear Activation function (ReLU) is performed after every convolutional layer in the network architecture outlined above.  Notice the impact this layer has on the activation map of various neurons throughout the network!\n    </p>\n    <h6 id='article-softmax'>Softmax</h6>\n    <p>\n    \t{softmaxEquation}\n    \tA softmax operation serves a key purpose: making sure the CNN outputs sum to 1.  Because of this, softmax operations are useful to scale model outputs into probabilities.  Clicking on the last layer reveals the softmax operation in the network. Notice how the logits after flatten aren’t scaled between zero to one.  For a visual indication of the impact of each logit (unscaled scalar value), they are encoded using a <span style=\"color:#FFC385;\">light orange</span> &rarr; <span style=\"color:#C44103;\">dark orange</span> color scale.  After passing through the softmax function, each class now corresponds to an appropriate probability! \n    </p>\n    <p>\n    \tYou might be thinking what the difference between standard normalization and softmax is&mdash;after all, both rescale the logits between 0 and 1.  Remember that backpropagation is a key aspect of training neural networks&mdash;we want the correct answer to have the largest “signal.” By using softmax, we are effectively “approximating” argmax while gaining differentiability.  Rescaling doesn’t weigh the max significantly higher than other logits, whereas softmax does.  Simply put, softmax is a “softer” argmax&mdash;see what we did there?\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/softmax_animation.gif\" alt=\"softmax interactive formula view\"/>\n      <div class=\"figure-caption\">\n        Figure 4. The <em>Softmax Interactive Formula View</em> allows a user to interact with both the color encoded logits and formula to understand how the prediction scores after the flatten layer are normalized to yield classification scores.\n      </div>\n    </div>\n    <h4 id='article-pooling'>Pooling Layers</h4>\n    <p>\n    \tThere are many types of pooling layers in different CNN architectures, but they all have the purpose of gradually decreasing the spatial extent of the network, which reduces the parameters and overall computation of the network.  The type of pooling used in the Tiny VGG architecture above is Max-Pooling.\n    </p>\n    <p>\n    \tThe Max-Pooling operation requires selecting a kernel size and a stride length during architecture design.  Once selected, the operation slides the kernel with the specified stride over the input while only selecting the largest value at each kernel slice from the input to yield a value for the output.  This process can be viewed by clicking a pooling neuron in the network above.\n    </p>\n    <p>\n    \tIn the Tiny VGG architecture above, the pooling layers use a 2x2 kernel and a stride of 2.  This operation with these specifications results in the discarding of 75% of activations.  By discarding so many values, Tiny VGG is more computationally efficient and avoids overfitting.\n    </p>\n    <h4 id='article-flatten'>Flatten Layer</h4>\n    <p>      \n      This layer converts a three-dimensional layer in the network into a one-dimensional vector to fit the  input of a fully-connected layer for classification.  For example, a 5x5x2 tensor would be converted into a vector of size 50.  The previous convolutional layers of the network extracted the features from the input image, but now it is time to classify the features.  We use the softmax function to classify these features, which requires a 1-dimensional input.  This is why the flatten layer is necessary.  This layer can be viewed by clicking any output class.  \n    </p>\n\n    <h2>Interactive features</h2>\n    <ol>\n    \t<li><strong>Upload your own image</strong> by selecting <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/upload_image_icon.png\" alt=\"upload image icon\"/> to understand how your image is classified into the 10 classes.  By analyzing the neurons throughout the network, you can understand the activations maps and extracted features.</li>\n    \t<li><strong>Change the activation map colorscale</strong> to better understand the impact of activations at different levels of abstraction by adjusting <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/heatmap_scale.png\" alt=\"heatmap\"/>.</li>\n    \t<li><strong>Understand network details</strong> such as layer dimensions and colorscales by clicking the <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> icon.</li>\n    \t<li><strong>Simulate network operations</strong> by clicking the <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/play_button.png\" alt=\"play icon\"/> button or interact with the layer slice in the <em>Interactive Formula View</em> by hovering over portions of the input or output to understand the mappings and underlying operations.</li>\n      <li><strong>Learn layer functions</strong> by clicking <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/info_button.png\" alt=\"info icon\"/> from the <em>Interactive Formula View</em> to read layer details from the article.</li>\n    </ol> \n\n    <h2>Video Tutorial</h2>\n    <ul>\n      <li class=\"video-link\" on:click={currentPlayer.play(0)}>\n        CNN Explainer Introduction\n        <small>(0:00-0:22)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(27)}>\n        <em>Overview</em>\n        <small>(0:27-0:37)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(37)}>\n        Convolutional <em>Elastic Explanation View</em>\n        <small>(0:37-0:46)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(46)}>\n        Convolutional, ReLU, and Pooling <em>Interactive Formula Views</em>\n        <small>(0:46-1:21)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(82)}>\n        Flatten <em>Elastic Explanation View</em>\n        <small>(1:22-1:41)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(101)}>\n        Softmax <em>Interactive Formula View</em>\n        <small>(1:41-2:02)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(126)}>\n        Engaging Learning Experience: Understanding Classification\n        <small>(2:06-2:28)</small>\n      </li>\n      <li class=\"video-link\" on:click={currentPlayer.play(149)}>\n        Interactive Tutorial Article\n        <small>(2:29-2:54)</small>\n      </li>\n    </ul>\n    <div class=\"video\">\n      <Youtube videoId=\"HnWIHWFbuUQ\" playerId=\"demo_video\" bind:this={currentPlayer}/>\n    </div>\n\n    <h2>How is CNN Explainer implemented?</h2>\n    <p>\n      CNN Explainer uses <a href=\"https://js.tensorflow.org/\"><em>TensorFlow.js</em></a>, an in-browser GPU-accelerated deep learning library to load the pretrained model for visualization.  The entire interactive system is written in Javascript using <a href=\"https://svelte.dev/\"><em>Svelte</em></a> as a framework and <a href=\"https://d3js.org/\"><em>D3.js</em></a> for visualizations. You only need a web browser to get started learning CNNs today!\n    </p>\n\n    <h2>Who developed CNN Explainer?</h2>\n    <p>\n      CNN Explainer was created by \n      <a href=\"https://zijie.wang/\">Jay Wang</a>,\n      <a href=\"https://www.linkedin.com/in/robert-turko/\">Robert Turko</a>, \n      <a href=\"http://oshaikh.com/\">Omar Shaikh</a>,\n      <a href=\"https://haekyu.com/\">Haekyu Park</a>,\n      <a href=\"http://nilakshdas.com/\">Nilaksh Das</a>,\n      <a href=\"https://fredhohman.com/\">Fred Hohman</a>,\n      <a href=\"http://minsuk.com\">Minsuk Kahng</a>, and\n      <a href=\"https://www.cc.gatech.edu/~dchau/\">Polo Chau</a>,\n      which was the result of a research collaboration between \n      Georgia Tech and Oregon State.  We thank Anmol Chhabria, Kaan Sancak, Kantwon Rogers, and the Georgia Tech Visualization Lab for their support and constructive feedback.  This work was supported in part by NSF grants IIS-1563816, CNS-1704701, NASA NSTRF, DARPA GARD, gifts from Intel, NVIDIA, Google, Amazon.\n    </p>\n  </div>\n</body>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    getVisualizationSizeConstraint, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  let gridInputMatrixSlice = gridData([[0]]);\n  let gridOutputMatrixSlice = gridData([[0]]);\n  let inputHighlights = array1d(image.length * image.length, (i) => true);\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = array1d(image.length * image.length, (i) => true);\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n\n  // lots of replication between mouseover and start-relu. TODO: fix this.\n  function startRelu() {\n    counter = 0;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      inputHighlights = array1d(image.length * image.length, (i) => undefined);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights[animatedH * output.length + animatedW] = true;\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n      gridInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      gridOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = array1d(image.length * image.length, (i) => undefined);\n    inputHighlights[animatedH * output.length + animatedW] = true;\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n    gridInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    gridOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startRelu();\n  let gridImage = gridData(image)\n  let gridOutput = gridData(output)\n  $ : {\n    startRelu();\n    gridImage = gridData(image)\n    gridOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={1}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={gridData([[0]])} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    ,\n    <Dataview data={gridInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={gridOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={20} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={1}/>\n</div>",
    "<script>\n\timport ActivationAnimator from './ActivationAnimator.svelte';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let output;\n  export let dataRange;\n  export let isExited;\n\n  const dispatch = createEventDispatcher();\n  let isPaused = false;\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-relu`);\n    scroll.animateScroll(anchor);\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          ReLU Activation\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n              <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <ActivationAnimator on:message={handlePauseFromInteraction} \n          image={input} output={output} isPaused={isPaused}\n          dataRange={dataRange}/>\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change pixel.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getDataRange,\n    getVisualizationSizeConstraint, generateOutputMappings,\n    getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n  export let colorScale;\n  export let isInputInputLayer = false;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernel.length; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernel.length; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([0]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startConvolution(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  let testKernel = gridData(kernel)\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n    testKernel = gridData(kernel)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)}\n      dataRange={dataRange} stride={stride} colorScale={colorScale}\n      isInputLayer={isInputInputLayer}/>\n</div>\n<div class=\"column has-text-centered\">\n  <KernelMathView data={testInputMatrixSlice} kernel={testKernel} constraint={getVisualizationSizeConstraint(kernel.length)}\n                  dataRange={dataRange} kernelRange={getDataRange(kernel)} colorScale={colorScale}\n                  isInputLayer={isInputInputLayer}/>\n  <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernel.length)} dataRange={dataRange}/>\n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false}\n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport ConvolutionAnimator from './ConvolutionAnimator.svelte';\n  import { singleConv } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernel;\n  export let dataRange;\n  export let colorScale = d3.interpolateRdBu;\n  export let isInputInputLayer = false;\n  export let isExited = false;\n  // export let output;\n  \n  const dispatch = createEventDispatcher();\n\tlet stride = 1;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleConv(input, kernel, stride);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-convolution`);\n    scroll.animateScroll(anchor);\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    isExited = true;\n    dispatch('message', {\n      text: isExited\n    });\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\" id=\"detailview-container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          Convolution\n        </div>\n\n        <div class=\"buttons\">\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"container is-centered\">\n        <ConvolutionAnimator on:message={handlePauseFromInteraction} \n          kernel={kernel} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} colorScale={colorScale}\n          isInputInputLayer={isInputInputLayer} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    getVisualizationSizeConstraint, getRNNMatrixSliceFromHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n  import DataviewRNN from './DataviewRNN.svelte';\n\n  export let image;\n  export let kernel;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let dimIndex;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  let gridInputMatrixSlice = gridData([[0]]);\n  let gridOutputMatrixSlice = gridData([[0]]);\n  let inputHighlights = array1d(image.length * image[0].length, (i) => true);\n  let outputHighlights = array1d(output.length * output[0].length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = array1d(image.length * image[0].length, (i) => true);\n    let outputHighlights = array1d(output.length * output[0].length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n\n  // lots of replication between mouseover and start-relu. TODO: fix this.\n  function startEmbedding() {\n    counter = 0;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output[0].length);\n      outputHighlights = array1d(output.length * output[0].length, (i) => false);\n      // inputHighlights = array1d(image.length * image[0].length, (i) => undefined);\n      const animatedH = Math.floor(flat_animated / output[0].length);\n      const animatedW = flat_animated % output[0].length;\n      dimIndex = animatedH * output[0].length + animatedW\n      outputHighlights[dimIndex] = true;\n      // inputHighlights[animatedH * image[0].length] = true;\n      // const inputMatrixSlice = getRNNMatrixSliceFromHighlights(image, inputHighlights, 1);\n      // gridInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getRNNMatrixSliceFromHighlights(output, outputHighlights);\n      gridOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    outputHighlights = array1d(output.length * output[0].length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    dimIndex = animatedH * output[0].length + animatedW;\n    outputHighlights[dimIndex] = true;\n    // inputHighlights = array1d(image.length * image[0].length, (i) => undefined);\n    // inputHighlights[animatedH * image[0].length +animatedW] = true;\n    // const inputMatrixSlice = getRNNMatrixSliceFromHighlights(image, inputHighlights, 1);\n    // gridInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getRNNMatrixSliceFromHighlights(output, outputHighlights);\n    gridOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startEmbedding();\n  let gridImage = gridData(image);\n  // let gridEmbed = gridData(kernel);\n  let gridOutput = gridData(output, getVisualizationSizeConstraint(output[0].length));\n  $ : {\n    startEmbedding();\n    gridImage = gridData(image)\n    // gridEmbed = gridData(kernel);\n    gridOutput = gridData(output, getVisualizationSizeConstraint(output[0].length));\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Token \n    <!-- ({image.length}, {image[0].length}) -->\n  </div>\n  <DataviewRNN on:message={handleMouseover} data={gridImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={true} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={1}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    Vocab[{image[0][0]}][{dimIndex+1}]\n    =\n    <DataviewRNN data={gridOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={20} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <DataviewRNN on:message={handleMouseover} data={gridOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output[0].length} constraint={getVisualizationSizeConstraint(output[0].length)*3} dataRange={dataRange} stride={1}/>\n</div>",
    "<script>\n\timport EmbeddingAnimator from './EmbeddingAnimator.svelte';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernel;\n  export let output;\n  export let dataRange;\n  export let isExited;\n\n  const dispatch = createEventDispatcher();\n  let isPaused = false;\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#rnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-embedding`);\n    scroll.animateScroll(anchor);\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          Word Embedding\n        </div>\n\n        <div class=\"buttons\">\n\n          <!-- <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div> -->\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n              <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <EmbeddingAnimator on:message={handlePauseFromInteraction} \n          image={input} kernel={kernel} output={output} isPaused={isPaused}\n          dataRange={dataRange}/>\n      </div>\n\n      <!-- <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change pixel.\n        </div>\n      </div> -->\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, compute_input_multiplies_with_weight,\n          generateOutputMappings, gridData\n  } from './DetailviewUtils.js';\n  import HyperparameterDataview from './HyperparameterDataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let padding;\n  export let isStrideValid;\n\n  const dispatch = createEventDispatcher();\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    isPaused = false;\n    dispatch('message', {\n      text: isPaused\n    });\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused || !isStrideValid) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n      counter++;\n    }, 1000)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  // Fix the total grid size to change hyperparameters without changing the grid\n  // size.  This must be two pixels smaller than the HyperparameterDataview svg\n  // size, so that the stroke on the right side of the grid does not get cut off.\n  const gridSize = 198;\n  startConvolution(stride);\n  let testImage = gridData(image, gridSize / image.length);\n  let testOutput = gridData(output, gridSize / output.length);\n  let testKernel = gridData(kernel, gridSize / kernel.length);\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image, gridSize / image.length);\n    testOutput = gridData(output, gridSize / output.length);\n    testKernel = gridData(kernel, gridSize / kernel.length);\n  }\n</script>\n\n<style>\n  .wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n  }\n\n  .column {\n    padding: 5px 10px 10px 10px;\n  }\n\n  .header-text {\n    line-height: 1.1;\n  }\n\n  .header-sub-text {\n    font-size: 13px;\n    color: #9a9a9a;\n    margin-bottom: 2px;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\">\n      Input ({image.length - 2 * padding}, {image.length - 2 * padding}) <br/>\n    </div>\n    <div class=\"header-sub-text\">\n      After-padding ({image.length}, {image.length})\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testImage} highlights={inputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isStrideValid={isStrideValid}/>\n  </div>\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\" style=\"padding-top: 27px;\">\n      Output ({output.length}, {output.length})\n    </div>\n    <div class=\"header-sub-text\">\n      &nbsp;\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isOutput={true} isStrideValid={isStrideValid}/>\n  </div>\n</div>",
    "<script>\n\timport HyperparameterAnimator from './HyperparameterAnimator.svelte';\n  import { singleConv } from '../utils/cnn.js';\n\n  let inputSize = 5;\n  let kernelSize = 2;\n  let padding = 0;\n  let stride = 1;\n  const dilation = 1;\n  let isPaused = false;\n  let isStrideValid = true;\n  $: inputSizeWithPadding = inputSize + 2 * padding;\n\n  function generateSquareArray(arrayDim) {\n    let arr = [];\n    for (let i = 0; i < arrayDim; i++) {\n      arr.push([]);\n      for (let j = 0; j < arrayDim; j++) {\n        arr[i].push(0)\n      }\n    }\n    return arr;\n  }\n\n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  // Update input, kernel, and output as user adjusts hyperparameters.\n  let input = generateSquareArray(inputSize + padding * 2);\n  let kernel = generateSquareArray(kernelSize);\n  $: input = generateSquareArray(inputSize + padding * 2);\n  $: kernel = generateSquareArray(kernelSize);\n  let outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    const stepSize = (inputSizeWithPadding - kernelSize) / stride + 1;\n    let strideNumberInput = document.getElementById(\"strideNumber\");\n    if (Number.isInteger(stepSize)) {\n      outputFinal = singleConv(input, kernel, stride);\n      if (strideNumberInput != null) {\n        strideNumberInput.className = strideNumberInput.className.replace(\"is-danger\", \"\");\n      }\n      isStrideValid = true;\n    } else {\n      if (!strideNumberInput.className.includes(\"is-danger\")) {\n        strideNumberInput.className += \" is-danger\";\n      }\n      isStrideValid = false;\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n</script>\n\n<style>\n  .control-button {\n    position: absolute;\n    top: 5px;\n    right: 15px;\n    color: gray;\n    font-size: 22px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 30px 20px 30px;\n    position: relative;\n  }\n\n  .left-part {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n  }\n\n  .right-part {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .content-container {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .field {\n    padding-top: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    padding-left : 10px;\n  }\n\n  .annotation-text-hyper {\n    font-size: 15px;\n    font-style: italic;\n  }\n\n  .annotation > img {\n    width: 20px;\n    margin-right: 5px;\n  }\n\n  .is-very-small {\n    font-size: 12px; \n  }\n\n  .field {\n    align-items: center;\n  }\n\n  .field-label.is-normal {\n    padding-top: 0;\n  }\n\n  .field:not(:last-child) {\n    margin-bottom: 7px;\n  }\n\n  label {\n    display: inline-block;\n    width: 105px;\n    text-align: right;\n    font-weight: 500;\n    color: #4a4a4a;\n  } \n\n  input[type=number] {\n    width: 50px;\n  }\n\n  input[type=range] {\n    width: 160px;\n  }\n</style>\n\n<div class=\"container has-text-centered\" id=\"detailview-container\">\n  <div class=\"box\">\n\n      <div class=\"control-button\" on:click={handleClickPause}>\n        {@html isPaused ?\n          '<i class=\"fas fa-play-circle play-icon\"></i>' :\n          '<i class=\"fas fa-pause-circle\"></i>'}\n      </div>\n\n    <div class=\"content-container\">\n      <div class=\"left-part\">\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Input Size:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={inputSize}\n              min={kernelSize} max={7}>\n          </div>\n\n          <input type=\"range\" bind:value={inputSize}\n            min={kernelSize} max={7}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Padding:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={padding} min={0}\n              max={kernelSize - 1}>\n          </div>\n\n          <input type=\"range\" bind:value={padding} min={0}\n            max={kernelSize - 1}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Kernel Size:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={kernelSize} min={padding + 1}\n              max={inputSizeWithPadding}>\n          </div>\n\n          <input type=\"range\" bind:value={kernelSize} min={padding + 1}\n            max={inputSizeWithPadding}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Stride:</label>\n            </div>\n            <input class=\"input is-very-small\" type=number id=\"strideNumber\" bind:value={stride} min=1\n              max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}>\n          </div>\n\n          <input type=\"range\" bind:value={stride} min=1\n            max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}>\n        </div>\n      </div>\n\n        <div class=\"right-part\">\n          <HyperparameterAnimator on:message={handlePauseFromInteraction} \n            kernel={kernel} image={input} output={outputFinal} isStrideValid={isStrideValid}\n            stride={stride} dilation={dilation} padding={padding} isPaused={isPaused}/>\n\n          <div class=\"annotation\">\n            <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon' width=\"25px\">\n            <div class=\"annotation-text-hyper\">\n              <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n            </div>\n          </div>\n          \n        </div>\n\n    </div>\n\n\n  </div>\n</div>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getVisualizationSizeConstraint,\n    generateOutputMappings, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let stride;\n  export let dilation\n  export let kernelLength;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernelLength; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernelLength; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([[0]]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n  \n  let counter;\n\n  // lots of replication between mouseover and start-pool. TODO: fix this.\n  function startMaxPool(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startMaxPool(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  $ : {\n    startMaxPool(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({testImage.length}, {testImage[0].length})\n  </div>\n\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={stride}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={testInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({testOutput.length}, {testOutput[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport PoolAnimator from './PoolAnimator.svelte';\n  import { singleMaxPooling } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernelLength;\n  export let dataRange;\n  export let isExited;\n  \n  const dispatch = createEventDispatcher();\n  // let isExited = false;\n\tlet stride = 2;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleMaxPooling(input);\n  // let dragging = false;\n  // let dragInfo = {x1: 0, x2: 0, y1: 0, y2: 0};\n  // let detailView = d3.select('#detailview').node();\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleMaxPooling(input);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n    console.log(isPaused)\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-pooling`);\n    scroll.animateScroll(anchor);\n  }\n\n  // Test dragging detail view, need more work\n  // const detailViewDragStart = (e) => {\n  //   // Record the starting pos\n  //   dragInfo.x1 = 0;\n  //   dragInfo.y1 = 0;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n  \n  //   dragging = true;\n  // }\n\n  // const detailViewDragEnd = (e) => {\n  //   dragging = false;\n  // }\n\n  // const detailViewDragMove = (e) => {\n  //   // Add up move to the starting pos\n  //   dragInfo.x1 = dragInfo.x2 - e.clientX;\n  //   dragInfo.y1 = dragInfo.y2 - e.clientY;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n\n  //   // Move detail view\n  //   detailView.style.top = (detailView.offsetTop - dragInfo.y1) + 'px';\n  //   detailView.style.left = (detailView.offsetLeft - dragInfo.x1) + 'px';\n  // }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n      \n        <div class=\"title-text\">\n          Max Pooling\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <PoolAnimator on:message={handlePauseFromInteraction} \n          kernelLength={kernelLength} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n          <div class=\"annotation-text\">\n            <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n          </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { onMount, afterUpdate, createEventDispatcher } from 'svelte';\n  export let logits;\n  export let logitColors;\n  export let selectedI;\n  export let highlightI = -1;\n  export let outputName;\n  export let outputValue;\n  export let startAnimation;\n\n  let sigmoidViewComponent;\n  let svg = null;\n  const dispatch = createEventDispatcher();\n  const formater = (n, d) => {\n    if (d === undefined) {\n      return d3.format('.2f')(n);\n    } else {\n      return d3.format(`.${d}f`)(n);\n    }\n  }\n\n  $: highlightI, (() => {\n    if (svg !== null) {\n      svg.selectAll(`.formula-term`)\n        .style('text-decoration', 'none')\n        .style('font-weight', 'normal');\n\n      svg.selectAll(`.formula-term-${highlightI}`)\n      .style('font-weight', 'bold')\n      .style('text-decoration', 'underline');\n    }\n  })();\n\n  $: startAnimation, (() => {\n    if (svg !== null) {\n      svg.select(`.formula-term-${startAnimation.i}`)\n        .transition('sigmoid-edge')\n        .duration(startAnimation.duration)\n        .style('fill-opacity', 1);\n    }\n  })();\n\n  const mouseOverHandler = (d, i, g, curI) => {\n    highlightI = curI;\n    dispatch('mouseOver', {curI: curI});\n  }\n\n  const mouseLeaveHandler = (d, i, g, curI) => {\n    highlightI = -1;\n    dispatch('mouseLeave', {curI: curI});\n  }\n\n  const handleClickX = () => {\n    dispatch('xClicked', {});\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-sigmoid`);\n    scroll.animateScroll(anchor);\n  }\n\n  onMount(() => {\n    svg = d3.select(sigmoidViewComponent)\n      .select('#sigmoid-svg');\n\n    let formulaRightGroup = svg.append('g')\n      .attr('class', 'formula-right')\n      .attr('transform', `translate(${10}, ${0})`)\n      .style('font-size', '15px');\n\n    // Denominator\n    let denominatorGroup = formulaRightGroup.append('g')\n      .attr('class', 'denominator')\n      .attr('transform', `translate(${0}, ${58})`);\n      \n    // Add the left (\n    denominatorGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .text('(');\n\n    // Need to loop through the logits array instead of data-binding because\n    // we want dynamic positioning based on prior '-' occurance\n    let curX = 8;\n    let numOfRows = 4;\n\n    logits.forEach((d, i) => {\n      if (i / numOfRows >= 1 && i % numOfRows === 0) {\n          curX = 8;\n      }\n\n      let curText = denominatorGroup.append('text')\n        .attr('x', curX)\n        .attr('y', Math.floor(i / numOfRows) * 20)\n        .style('cursor', 'crosshair')\n        .style('pointer-events', 'all')\n        .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, i))\n        .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, i))\n        .text(`exp(`);\n      \n      curText.append('tspan')\n        .attr('class', `formula-term-${i} formula-term`)\n        .attr('dx', '1')\n        .style('fill', logitColors[i])\n        .style('fill-opacity', (i === selectedI) || startAnimation.hasInitialized ? 1 : 0)\n        .text(formater(d));\n      \n      curText.append('tspan')\n        .attr('dx', '1')\n        .text(')');\n      \n      let curBBox = curText.node().getBBox();\n      curX += curBBox.width + 4;\n\n      if (i !== logits.length - 1) {\n        denominatorGroup.append('text')\n          .attr('x', curX)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .text('+');\n        curX += 14;\n      } else {\n        denominatorGroup.append('text')\n          .attr('x', curX-2)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .style('fill', 'gray')\n          .text('+ 1 )');\n      }\n    })\n\n    denominatorGroup.selectAll('text')\n      .data(logits)\n      .enter()\n      .append('text')\n      .attr('x', (d, i) => 40 * i)\n      .attr('y', 0)\n      .text(d => formater(d));\n    \n    // Calculate the dynamic denominator group width\n    let denominatorGroupBBox = denominatorGroup.node().getBBox();\n\n    // Draw the fraction line\n    formulaRightGroup.append('line')\n      .attr('class', 'separation-line')\n      .attr('x1', -5)\n      .attr('x2', denominatorGroupBBox.width + 5)\n      .attr('y1', 32)\n      .attr('y2', 32)\n      .style('stroke-width', 1.2)\n      .style('stroke', 'gray');\n    \n    // Draw the numerator\n    let numeratorGroup = formulaRightGroup.append('g')\n      .attr('class', 'numerator-group')\n      .attr('transform', `translate(${0}, ${20})`);\n    \n    let numeratorText = numeratorGroup.append('text')\n      .attr('x', denominatorGroupBBox.x + denominatorGroupBBox.width / 2)\n      .attr('y', 0)\n      .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, selectedI))\n      .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, selectedI))\n      .style('pointer-events', 'all')\n      .style('cursor', 'crosshair')\n      .style('text-anchor', 'middle')\n      .text(' 1 ');\n      // .text('exp(');\n\n    // numeratorText.append('tspan')\n    //   .attr('class', `formula-term-${selectedI} formula-term`)\n    //   .attr('dx', 1)\n    //   .style('fill', logitColors[selectedI])\n    //   .text(`${formater(logits[selectedI])}`);\n\n    // numeratorText.append('tspan')\n    //    .attr('dx', 1)\n    //   .text(')');\n    \n    // Draw the left part of the formula\n    let formulaLeftGroup = svg.append('g')\n      .attr('class', 'formula-left')\n      .attr('transform', `translate(${145}, ${32})`);\n    \n    let sigmoidText = formulaLeftGroup.append('text')\n      .attr('x', 20)\n      .attr('dominant-baseline', 'middle')\n      .text(`${formater(outputValue, 4)}`);\n    \n    let sigmoidTextBBox = sigmoidText.node().getBBox();\n    \n    formulaLeftGroup.append('text')\n      .attr('dominant-baseline', 'middle')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .style('font-weight', 'bold')\n      .text('=');\n\n  })\n\n</script>\n\n<style>\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 6px;\n    right: 10px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .box {\n    padding: 5px 10px 15px 10px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  svg {\n    margin: 10px 0 12px 0;\n  }\n</style>\n\n<div class=\"container\" bind:this={sigmoidViewComponent}>\n  <div class=\"box\">\n\n    <div class=\"buttons\">\n      <!-- <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n        <i class=\"fas fa-info-circle\"></i>\n      </div> -->\n\n      <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n        <i class=\"fas control-icon fa-times-circle\"></i>\n      </div>\n    </div>\n\n    <div class=\"title-text\">\n      Sigmoid Score \n      <!-- for <i>\"{outputName}\"</i> -->\n    </div>\n\n    <svg id=\"sigmoid-svg\" width=\"240\" height=\"105\"/>\n<!-- \n    <div class=\"annotation\">\n      <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n      <div class=\"annotation-text\">\n        <span style=\"font-weight:600\">Hover over</span> the numbers to highlight logit circles.\n      </div>\n    </div> -->\n\n  </div>\n</div>\n\n",
    "<script>\n  import { onMount, afterUpdate, createEventDispatcher } from 'svelte';\n  export let logits;\n  export let logitColors;\n  export let selectedI;\n  export let highlightI = -1;\n  export let outputName;\n  export let outputValue;\n  export let startAnimation;\n\n  let softmaxViewComponent;\n  let svg = null;\n  const dispatch = createEventDispatcher();\n  const formater = (n, d) => {\n    if (d === undefined) {\n      return d3.format('.2f')(n);\n    } else {\n      return d3.format(`.${d}f`)(n);\n    }\n  }\n\n  $: highlightI, (() => {\n    if (svg !== null) {\n      svg.selectAll(`.formula-term`)\n        .style('text-decoration', 'none')\n        .style('font-weight', 'normal');\n\n      svg.selectAll(`.formula-term-${highlightI}`)\n      .style('font-weight', 'bold')\n      .style('text-decoration', 'underline');\n    }\n  })();\n\n  $: startAnimation, (() => {\n    if (svg !== null) {\n      svg.select(`.formula-term-${startAnimation.i}`)\n        .transition('softmax-edge')\n        .duration(startAnimation.duration)\n        .style('fill-opacity', 1);\n    }\n  })();\n\n  const mouseOverHandler = (d, i, g, curI) => {\n    highlightI = curI;\n    dispatch('mouseOver', {curI: curI});\n  }\n\n  const mouseLeaveHandler = (d, i, g, curI) => {\n    highlightI = -1;\n    dispatch('mouseLeave', {curI: curI});\n  }\n\n  const handleClickX = () => {\n    dispatch('xClicked', {});\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-softmax`);\n    scroll.animateScroll(anchor);\n  }\n\n  onMount(() => {\n    svg = d3.select(softmaxViewComponent)\n      .select('#softmax-svg');\n\n    let formulaRightGroup = svg.append('g')\n      .attr('class', 'formula-right')\n      .attr('transform', `translate(${10}, ${0})`)\n      .style('font-size', '15px');\n\n    // Denominator\n    let denominatorGroup = formulaRightGroup.append('g')\n      .attr('class', 'denominator')\n      .attr('transform', `translate(${0}, ${58})`);\n      \n    // Add the left (\n    denominatorGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .text('(');\n\n    // Need to loop through the logits array instead of data-binding because\n    // we want dynamic positioning based on prior '-' occurance\n    let curX = 8;\n    let numOfRows = 4;\n\n    logits.forEach((d, i) => {\n      if (i / numOfRows >= 1 && i % numOfRows === 0) {\n          curX = 8;\n      }\n\n      let curText = denominatorGroup.append('text')\n        .attr('x', curX)\n        .attr('y', Math.floor(i / numOfRows) * 20)\n        .style('cursor', 'crosshair')\n        .style('pointer-events', 'all')\n        .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, i))\n        .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, i))\n        .text(`exp(`);\n      \n      curText.append('tspan')\n        .attr('class', `formula-term-${i} formula-term`)\n        .attr('dx', '1')\n        .style('fill', logitColors[i])\n        .style('fill-opacity', (i === selectedI) || startAnimation.hasInitialized ? 1 : 0)\n        .text(formater(d));\n      \n      curText.append('tspan')\n        .attr('dx', '1')\n        .text(')');\n      \n      let curBBox = curText.node().getBBox();\n      curX += curBBox.width + 4;\n\n      if (i !== logits.length - 1) {\n        denominatorGroup.append('text')\n          .attr('x', curX)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .text('+');\n        curX += 14;\n      } else {\n        denominatorGroup.append('text')\n          .attr('x', curX-2)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .style('fill', 'gray')\n          .text(')');\n      }\n    })\n\n    denominatorGroup.selectAll('text')\n      .data(logits)\n      .enter()\n      .append('text')\n      .attr('x', (d, i) => 40 * i)\n      .attr('y', 0)\n      .text(d => formater(d));\n    \n    // Calculate the dynamic denominator group width\n    let denominatorGroupBBox = denominatorGroup.node().getBBox();\n\n    // Draw the fraction line\n    formulaRightGroup.append('line')\n      .attr('class', 'separation-line')\n      .attr('x1', -5)\n      .attr('x2', denominatorGroupBBox.width + 5)\n      .attr('y1', 32)\n      .attr('y2', 32)\n      .style('stroke-width', 1.2)\n      .style('stroke', 'gray');\n    \n    // Draw the numerator\n    let numeratorGroup = formulaRightGroup.append('g')\n      .attr('class', 'numerator-group')\n      .attr('transform', `translate(${0}, ${20})`);\n    \n    let numeratorText = numeratorGroup.append('text')\n      .attr('x', denominatorGroupBBox.x + denominatorGroupBBox.width / 2)\n      .attr('y', 0)\n      .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, selectedI))\n      .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, selectedI))\n      .style('pointer-events', 'all')\n      .style('cursor', 'crosshair')\n      .style('text-anchor', 'middle')\n      .text('exp(');\n\n    numeratorText.append('tspan')\n      .attr('class', `formula-term-${selectedI} formula-term`)\n      .attr('dx', 1)\n      .style('fill', logitColors[selectedI])\n      .text(`${formater(logits[selectedI])}`);\n\n    numeratorText.append('tspan')\n       .attr('dx', 1)\n      .text(')');\n    \n    // Draw the left part of the formula\n    let formulaLeftGroup = svg.append('g')\n      .attr('class', 'formula-left')\n      .attr('transform', `translate(${395}, ${32})`);\n    \n    let softmaxText = formulaLeftGroup.append('text')\n      .attr('x', 20)\n      .attr('dominant-baseline', 'middle')\n      .text(`${formater(outputValue, 4)}`);\n    \n    let softmaxTextBBox = softmaxText.node().getBBox();\n    \n    formulaLeftGroup.append('text')\n      .attr('dominant-baseline', 'middle')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .style('font-weight', 'bold')\n      .text('=');\n\n  })\n\n</script>\n\n<style>\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 6px;\n    right: 10px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .box {\n    padding: 5px 10px 15px 10px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  svg {\n    margin: 10px 0 12px 0;\n  }\n</style>\n\n<div class=\"container\" bind:this={softmaxViewComponent}>\n  <div class=\"box\">\n\n    <div class=\"buttons\">\n      <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n        <i class=\"fas fa-info-circle\"></i>\n      </div>\n\n      <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n        <i class=\"fas control-icon fa-times-circle\"></i>\n      </div>\n    </div>\n\n    <div class=\"title-text\">\n      Softmax Score for <i>\"{outputName}\"</i>\n    </div>\n\n    <svg id=\"softmax-svg\" width=\"470\" height=\"105\"/>\n\n    <div class=\"annotation\">\n      <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n      <div class=\"annotation-text\">\n        <span style=\"font-weight:600\">Hover over</span> the numbers to highlight logit circles.\n      </div>\n    </div>\n\n  </div>\n</div>\n\n",
    "<script>\n  /* global d3 */\n\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { modalStore } from '../stores.js';\n\n  let modalComponent;\n  let valiImg;\n  let inputValue = '';\n  let showLoading = false;\n  let files;\n  let usingURL = true;\n  let errorInfo = {\n    show: false,\n    error: ''\n  };\n  const dispatch = createEventDispatcher();\n\n  let modalInfo = {\n    show: false\n  };\n  modalStore.set(modalInfo);\n  modalStore.subscribe(value => {modalInfo = value});\n\n  const errorCallback = () => {\n    // The URL is invalid, show an error message on the UI\n    showLoading = false;\n    errorInfo.show = true;\n    errorInfo.error = usingURL ? \"We can't find the image at that URL.\" :\n      \"Not a valid image file.\";\n  }\n\n  const loadCallback = () => {\n    // The URL is valid, but we are not sure if loading it to canvas would be\n    // blocked by crossOrigin setting. Try it here before dispatch to parent.\n\n    // https://stackoverflow.com/questions/13674835/canvas-tainted-by-cross-origin-data\n    let canvas = document.createElement(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n\n    canvas.width = valiImg.width;\n    canvas.height = valiImg.height;\n    context.drawImage(valiImg, 0, 0);\n\n    try {\n      context.getImageData(0, 0, valiImg.width, valiImg.height);\n      // If the foreign image does support CORS -> use this image\n      // dispatch to parent component to use the input image\n      showLoading = false;\n      modalInfo.show = false;\n      modalStore.set(modalInfo);\n      dispatch('urlTyped', {url: valiImg.src});\n      inputValue = null;\n    } catch(err) {\n      // If the foreign image does not support CORS -> use this image\n      showLoading = false;\n      errorInfo.show = true;\n      errorInfo.error = \"No permission to load this image.\"\n    }\n  }\n\n  const imageUpload = () => {\n    usingURL = false;\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      valiImg.src = event.target.result;\n    }\n    reader.readAsDataURL(files[0]);\n  }\n\n  const crossClicked = () => {\n    modalInfo.show = false;\n    modalStore.set(modalInfo);\n    // Dispatch the parent component\n    dispatch('xClicked', {preImage: modalInfo.preImage});\n  }\n\n  const addClicked = () => {\n    // Validate the input URL\n    showLoading = true;\n    errorInfo.show = false;\n    valiImg.crossOrigin = \"Anonymous\";\n    valiImg.src = inputValue;\n  }\n\n  onMount(() => {\n    let modal = d3.select(modalComponent)\n      .select('#input-modal');\n  })\n\n</script>\n\n<style>\n  .modal-card {\n    max-width: 500px;\n  }\n\n  .modal-card-title {\n    font-size: 20px;\n  }\n\n  .modal-card-head {\n    padding: 15px 20px;\n  }\n\n  .modal-card-foot {\n    padding: 12px 20px;\n    justify-content: space-between;\n  }\n\n  .is-smaller {\n    font-size: 15px;\n    padding: 0.5em 0.8em;\n    max-height: 2.2em;\n  }\n\n  .small-font {\n    font-size: 15px;\n  }\n\n  .error-message {\n    font-size: 15px;\n    padding: 0.5em 0;\n    color: #F22B61;\n  }\n\n  .control {\n    width: 100%;\n  }\n\n  .or-label {\n    font-size: 15px;\n    margin: 0 10px;\n    padding: 0.5em 0;\n  }\n\n  .field {\n    display: flex;\n    justify-content: space-between;\n  }\n\n</style>\n\n\n<div class=\"modal-component\"\n  bind:this={modalComponent}>\n\n  <div class=\"modal\"\n    id=\"input-modal\"\n    class:is-active={modalInfo.show}>\n\n    <div class=\"modal-background\" on:click={crossClicked}></div>\n\n    <div class=\"modal-card\">\n      <header class=\"modal-card-head\">\n        <p class=\"modal-card-title\">Add Input Image</p>\n        <button class=\"delete\" aria-label=\"close\" on:click={crossClicked}></button>\n      </header>\n\n      <section class=\"modal-card-body\">\n        <div class=\"field\">\n          <div class=\"control has-icons-left\"\n            class:is-loading={showLoading}>\n\n            <input class=\"input small-font\" type=\"url\"\n              bind:value={inputValue}\n              placeholder=\"Paste URL of image...\">\n\n            <span class=\"icon small-font is-left\">\n              <i class=\"fas fa-link\"></i>\n            </span>\n\n          </div>\n\n          <div class=\"or-label\">or</div>\n\n          <div class=\"file\">\n            <label class=\"file-label\">\n              <input class=\"file-input\" type=\"file\" name=\"image\"\n                accept=\".png,.jpeg,.tiff,.jpg,.png\"\n                on:change={imageUpload}\n                bind:files={files}>\n              <span class=\"file-cta small-font\">\n                <span class=\"file-icon\">\n                  <i class=\"fas fa-upload\"></i>\n                </span>\n                <span class=\"file-label\">\n                  Upload\n                </span>\n              </span>\n            </label>\n          </div>\n\n        </div>\n\n      </section>\n\n      <footer class=\"modal-card-foot\">\n\n        <div class=\"error-message\"\n          class:hidden={!errorInfo.show}>\n          {errorInfo.error}\n        </div>\n\n        <div class=\"button-container\">\n          <button class=\"button is-smaller\"\n            on:click={crossClicked}>\n            Cancel\n          </button>\n\n          <button class=\"button is-success is-smaller\"\n            on:click={addClicked}>\n            Add\n          </button>\n        </div>\n\n\n      </footer>\n    </div>\n\n  </div>\n\n  <!-- An invisible image to check if the user input URL is valid -->\n  <img style=\"display: none\"\n    id=\"vali-image\"\n    alt=\"hidden image\"\n    bind:this={valiImg}\n    on:error={errorCallback}\n    on:load={loadCallback} />\n\n</div>\n",
    "<script>\n  // Svelte functions\n  import { onMount } from 'svelte';\n  import {\n    cnnStore, svgStore, vSpaceAroundGapStore, hSpaceAroundGapStore,\n    nodeCoordinateStore, selectedScaleLevelStore, cnnLayerRangesStore,\n    needRedrawStore, cnnLayerMinMaxStore, detailedModeStore,\n    shouldIntermediateAnimateStore, isInSoftmaxStore, softmaxDetailViewStore,\n    hoverInfoStore, allowsSoftmaxAnimationStore, modalStore,\n    intermediateLayerPositionStore\n  } from '../stores.js';\n\n  // Svelte views\n  import ConvolutionView from '../detail-view/Convolutionview.svelte';\n  import ActivationView from '../detail-view/Activationview.svelte';\n  import PoolView from '../detail-view/Poolview.svelte';\n  import SoftmaxView from '../detail-view/Softmaxview.svelte';\n  import Modal from './Modal.svelte'\n  import Article from '../article/Article.svelte';\n\n  // Overview functions\n  import { loadTrainedModel, constructCNN } from '../utils/cnn-tf.js';\n  import { overviewConfig } from '../config.js';\n\n  import {\n    addOverlayRect, drawConv1, drawConv2, drawConv3, drawConv4\n  } from './intermediate-draw.js';\n\n  import {\n    moveLayerX, addOverlayGradient\n  } from './intermediate-utils.js';\n\n  import {\n    drawFlatten, softmaxDetailViewMouseOverHandler, softmaxDetailViewMouseLeaveHandler\n  } from './flatten-draw.js';\n\n  import {\n    drawOutput, drawCNN, updateCNN, updateCNNLayerRanges, drawCustomImage\n  } from './overview-draw.js';\n\n\n  // View bindings\n  let overviewComponent;\n  let scaleLevelSet = new Set(['local', 'module', 'global']);\n  let selectedScaleLevel = 'local';\n  selectedScaleLevelStore.set(selectedScaleLevel);\n  let previousSelectedScaleLevel = selectedScaleLevel;\n  let wholeSvg = undefined;\n  let svg = undefined;\n\n  $: selectedScaleLevel, selectedScaleLevelChanged();\n\n  // Configs\n  const layerColorScales = overviewConfig.layerColorScales;\n  const nodeLength = overviewConfig.nodeLength;\n  const plusSymbolRadius = overviewConfig.plusSymbolRadius;\n  const numLayers = overviewConfig.numLayers;\n  const edgeOpacity = overviewConfig.edgeOpacity;\n  const edgeInitColor = overviewConfig.edgeInitColor;\n  const edgeHoverColor = overviewConfig.edgeHoverColor;\n  const edgeHoverOuting = overviewConfig.edgeHoverOuting;\n  const edgeStrokeWidth = overviewConfig.edgeStrokeWidth;\n  const intermediateColor = overviewConfig.intermediateColor;\n  const kernelRectLength = overviewConfig.kernelRectLength;\n  const svgPaddings = overviewConfig.svgPaddings;\n  const gapRatio = overviewConfig.gapRatio;\n  const overlayRectOffset = overviewConfig.overlayRectOffset;\n  const classLists = overviewConfig.classLists;\n\n  // Shared properties\n  let needRedraw = [undefined, undefined];\n  needRedrawStore.subscribe( value => {needRedraw = value;} );\n\n  let nodeCoordinate = undefined;\n  nodeCoordinateStore.subscribe( value => {nodeCoordinate = value;} )\n\n  let cnnLayerRanges = undefined;\n  cnnLayerRangesStore.subscribe( value => {cnnLayerRanges = value;} )\n\n  let cnnLayerMinMax = undefined;\n  cnnLayerMinMaxStore.subscribe( value => {cnnLayerMinMax = value;} )\n\n  let detailedMode = undefined;\n  detailedModeStore.subscribe( value => {detailedMode = value;} )\n\n  let shouldIntermediateAnimate = undefined;\n  shouldIntermediateAnimateStore.subscribe(value => {\n    shouldIntermediateAnimate = value;\n  })\n\n  let vSpaceAroundGap = undefined;\n  vSpaceAroundGapStore.subscribe( value => {vSpaceAroundGap = value;} )\n\n  let hSpaceAroundGap = undefined;\n  hSpaceAroundGapStore.subscribe( value => {hSpaceAroundGap = value;} )\n\n  let isInSoftmax = undefined;\n  isInSoftmaxStore.subscribe( value => {isInSoftmax = value;} )\n\n  let softmaxDetailViewInfo = undefined;\n  softmaxDetailViewStore.subscribe( value => {\n    softmaxDetailViewInfo = value;\n  } )\n\n  let modalInfo = undefined;\n  modalStore.subscribe( value => {modalInfo = value;} )\n\n  let hoverInfo = undefined;\n  hoverInfoStore.subscribe( value => {hoverInfo = value;} )\n\n  let intermediateLayerPosition = undefined;\n  intermediateLayerPositionStore.subscribe ( value => {intermediateLayerPosition = value;} )\n\n  let width = undefined;\n  let height = undefined;\n  let model = undefined;\n  let selectedNode = {layerName: '', index: -1, data: null};\n  let isInIntermediateView = false;\n  let isInActPoolDetailView = false;\n  let actPoolDetailViewNodeIndex = -1;\n  let actPoolDetailViewLayerIndex = -1;\n  let detailedViewNum = undefined;\n  let disableControl = false;\n\n  // Wait to load\n  let cnn = undefined;\n\n  let detailedViewAbsCoords = {\n    1 : [600, 270, 490, 290],\n    2: [500, 270, 490, 290],\n    3 : [700, 270, 490, 290],\n    4: [600, 270, 490, 290],\n    5: [650, 270, 490, 290],\n    6 : [775, 270, 490, 290],\n    7 : [100, 270, 490, 290],\n    8 : [60, 270, 490, 290],\n    9 : [200, 270, 490, 290],\n    10 : [300, 270, 490, 290],\n  }\n\n  const layerIndexDict = {\n    'input': 0,\n    'conv_1_1': 1,\n    'relu_1_1': 2,\n    'conv_1_2': 3,\n    'relu_1_2': 4,\n    'max_pool_1': 5,\n    'conv_2_1': 6,\n    'relu_2_1': 7,\n    'conv_2_2': 8,\n    'relu_2_2': 9,\n    'max_pool_2': 10,\n    'output': 11\n  }\n\n  const layerLegendDict = {\n    0: {local: 'input-legend', module: 'input-legend', global: 'input-legend'},\n    1: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    2: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    3: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    4: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    5: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    6: {local: 'local-legend-1-1', module: 'module-legend-1', global: 'global-legend'},\n    7: {local: 'local-legend-1-1', module: 'module-legend-1', global: 'global-legend'},\n    8: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    9: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    10: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    11: {local: 'output-legend', module: 'output-legend', global: 'output-legend'}\n  }\n\n  let imageOptions = [\n    {file: 'boat_1.jpeg', class: 'lifeboat'},\n    {file: 'bug_1.jpeg', class: 'ladybug'},\n    {file: 'pizza_1.jpeg', class: 'pizza'},\n    {file: 'pepper_1.jpeg', class: 'bell pepper'},\n    {file: 'bus_1.jpeg', class: 'bus'},\n    {file: 'koala_1.jpeg', class: 'koala'},\n    {file: 'espresso_1.jpeg', class: 'espresso'},\n    {file: 'panda_1.jpeg', class: 'red panda'},\n    {file: 'orange_1.jpeg', class: 'orange'},\n    {file: 'car_1.jpeg', class: 'sport car'}\n  ];\n  let selectedImage = imageOptions[6].file;\n\n  let nodeData;\n  let selectedNodeIndex = -1;\n  let isExitedFromDetailedView = true;\n  let isExitedFromCollapse = true;\n  let customImageURL = null;\n\n  // Helper functions\n  const selectedScaleLevelChanged = () => {\n    if (svg !== undefined) {\n      if (!scaleLevelSet.add(selectedScaleLevel)) {\n        console.error('Encounter unknown scale level!');\n      }\n\n      // Update nodes and legends\n      if (selectedScaleLevel != previousSelectedScaleLevel){\n        // We can simply redraw all nodes using the new color scale, or we can\n        // make it faster by only redraw certian nodes\n        let updatingLayerIndexDict = {\n          local: {\n            module: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10]\n          },\n          module: {\n            local: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10]\n          },\n          global: {\n            local: [1, 2, 3, 4, 5, 8, 9, 10],\n            module: [1, 2, 3, 4, 5]\n          }\n        };\n\n        let updatingLayerIndex = updatingLayerIndexDict[\n          previousSelectedScaleLevel][selectedScaleLevel];\n\n        updatingLayerIndex.forEach(l => {\n          let range = cnnLayerRanges[selectedScaleLevel][l];\n          svg.select(`#cnn-layer-group-${l}`)\n            .selectAll('.node-image')\n            .each((d, i, g) => drawOutput(d, i, g, range));\n        });\n \n        // Hide previous legend\n        svg.selectAll(`.${previousSelectedScaleLevel}-legend`)\n          .classed('hidden', true);\n\n        // Show selected legends\n        svg.selectAll(`.${selectedScaleLevel}-legend`)\n          .classed('hidden', !detailedMode);\n      }\n      previousSelectedScaleLevel = selectedScaleLevel;\n      selectedScaleLevelStore.set(selectedScaleLevel);\n    }\n  }\n\n  const intermediateNodeMouseOverHandler = (d, i, g) => {\n    if (detailedViewNum !== undefined) { return; }\n    svg.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 1);\n  }\n\n  const intermediateNodeMouseLeaveHandler = (d, i, g) => {\n    // return;\n    if (detailedViewNum !== undefined) { return; }\n    svg.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 0);\n  }\n\n  const intermediateNodeClicked = (d, i, g, selectedI, curLayerIndex) => {\n    d3.event.stopPropagation();\n    isExitedFromCollapse = false;\n    // Use this event to trigger the detailed view\n    if (detailedViewNum === d.index) {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${d.index}`)\n        .style('opacity', 0);\n    } \n    // We need to show a new detailed view (two cases: if we need to close the\n    // old detailed view or not)\n    else {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = d.index;\n      let inputMatrix = d.output;\n      let kernelMatrix = d.outputLinks[selectedI].weight;\n      // let interMatrix = singleConv(inputMatrix, kernelMatrix);\n      let colorScale = layerColorScales.conv;\n\n      // Compute the color range\n      let rangePre = cnnLayerRanges[selectedScaleLevel][curLayerIndex - 1];\n      let rangeCur = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      let range = Math.max(rangePre, rangeCur);\n\n      // User triggers a different detailed view\n      if (detailedViewNum !== undefined) {\n        // Change the underneath highlight\n        svg.select(`rect#underneath-gateway-${detailedViewNum}`)\n          .style('opacity', 0);\n        svg.select(`rect#underneath-gateway-${d.index}`)\n          .style('opacity', 1);\n      }\n      \n      // Dynamically position the detail view\n      let wholeSvg = d3.select('#cnn-svg');\n      let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n      let svgWidth = +wholeSvg.style('width').replace('px', '');\n      let detailViewTop = 100 + svgYMid - 250 / 2;\n      let positionX = intermediateLayerPosition[Object.keys(layerIndexDict)[curLayerIndex]];\n\n      let posX = 0;\n      if (curLayerIndex > 6) {\n        posX = (positionX - svgPaddings.left) / 2;\n        posX = svgPaddings.left + posX - 486 / 2;\n      } else {\n        posX = (svgWidth + svgPaddings.right - positionX) / 2;\n        posX = positionX + posX - 486 / 2;\n      }\n\n      const detailview = document.getElementById('detailview');\n      detailview.style.top = `${detailViewTop}px`;\n      detailview.style.left = `${posX}px`;\n      detailview.style.position = 'absolute';\n\n      detailedViewNum = d.index;\n\n      // Send the currently used color range to detailed view\n      nodeData.colorRange = range;\n      nodeData.inputIsInputLayer = curLayerIndex <= 1;\n    }\n  }\n\n  // The order of the if/else statements in this function is very critical\n  const emptySpaceClicked = () => {\n    // If detail view -> rewind to intermediate view\n    if (detailedViewNum !== undefined) {\n          // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      svg.select(`rect#underneath-gateway-${detailedViewNum}`)\n        .style('opacity', 0);\n      detailedViewNum = undefined;\n    }\n\n    // If softmax view -> rewind to flatten layer view\n    else if (isInSoftmax) {\n      svg.select('.softmax-symbol')\n        .dispatch('click');\n    }\n\n    // If intermediate view -> rewind to overview\n    else if (isInIntermediateView) {\n      let curLayerIndex = layerIndexDict[selectedNode.layerName];\n      quitIntermediateView(curLayerIndex, selectedNode.domG, selectedNode.domI);\n      d3.select(selectedNode.domG[selectedNode.domI])\n        .dispatch('mouseleave');\n    }\n\n    // If pool/act detail view -> rewind to overview\n    else if (isInActPoolDetailView) {\n      quitActPoolDetailView();\n    }\n  }\n\n  const prepareToEnterIntermediateView = (d, g, i, curLayerIndex) => {\n    isInIntermediateView = true;\n    // Hide all legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg.selectAll('.input-legend').classed('hidden', true);\n    svg.selectAll('.output-legend').classed('hidden', true);\n\n    // Hide the input annotation\n    svg.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Highlight the previous layer and this node\n    svg.select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 2);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 2);\n    \n    // Disable control panel UI\n    // d3.select('#level-select').property('disabled', true);\n    // d3.selectAll('.image-container')\n    //   .style('cursor', 'not-allowed')\n    //   .on('mouseclick', () => {});\n    disableControl = true;\n    \n    // Allow infinite animation loop\n    shouldIntermediateAnimateStore.set(true);\n\n    // Highlight the labels\n    svg.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', '800');\n    \n    // Register a handler on the svg element so user can click empty space to quit\n    // the intermediate view\n    d3.select('#cnn-svg')\n      .on('click', emptySpaceClicked);\n  }\n\n  const quitActPoolDetailView = () => {\n    isInActPoolDetailView = false;\n    actPoolDetailViewNodeIndex = -1;\n\n    let layerIndex = layerIndexDict[selectedNode.layerName];\n    let nodeIndex = selectedNode.index;\n    svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n\n    selectedNode.data.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', true);\n    })\n\n    // Clean up the underneath rects\n    svg.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n\n    // Show all edges\n    let unimportantEdges = svg.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== actPoolDetailViewLayerIndex;\n      })\n      .style('visibility', null);\n    \n    // Recover control UI\n    disableControl = false;\n\n    // Show legends if in detailed mode\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Also dehighlight the edge\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n\n    // Remove the overlay rect\n    svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg.selectAll('defs.overlay-gradient').remove();\n        svg.select('.input-annotation').classed('hidden', false);\n      });\n\n    // Turn the fade out nodes back\n    svg.select(`g#cnn-layer-group-${layerIndex}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        d3.select(sg[si])\n          .style('pointer-events', 'all');\n    });\n\n    svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        // Recover the old events\n        d3.select(sg[si])\n          .style('pointer-events', 'all')\n          .on('mouseover', nodeMouseOverHandler)\n          .on('mouseleave', nodeMouseLeaveHandler)\n          .on('click', nodeClickHandler);\n    });\n\n    // Deselect the node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n\n    actPoolDetailViewLayerIndex = -1;\n  }\n\n  const actPoolDetailViewPreNodeMouseOverHandler = (d, i, g) => {\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    \n    // Highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', false);\n  }\n\n  const actPoolDetailViewPreNodeMouseLeaveHandler = (d, i, g) => {\n    // De-highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n\n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n    \n    // De-highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', true);\n    \n    // De-highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n  }\n\n  const actPoolDetailViewPreNodeClickHandler = (d, i, g) => {\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n\n    // Click the pre-layer node in detail view has the same effect as clicking\n    // the cur-layer node, which is to open a new detail view window\n    svg.select(`g#layer-${layerIndex + 1}-node-${nodeIndex}`)\n      .node()\n      .dispatchEvent(new Event('click'));\n  }\n\n  const enterDetailView = (curLayerIndex, i) => {\n    isInActPoolDetailView = true;\n    actPoolDetailViewNodeIndex = i;\n    actPoolDetailViewLayerIndex = curLayerIndex;\n\n    // Dynamically position the detail view\n    let wholeSvg = d3.select('#cnn-svg');\n    let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n    let svgWidth = +wholeSvg.style('width').replace('px', '');\n    let detailViewTop = 100 + svgYMid - 260 / 2;\n\n    let posX = 0;\n    if (curLayerIndex > 5) {\n      posX = nodeCoordinate[curLayerIndex - 1][0].x + 50;\n      posX = posX / 2 - 500 / 2;\n    } else {\n      posX = (svgWidth - nodeCoordinate[curLayerIndex][0].x - nodeLength) / 2;\n      posX = nodeCoordinate[curLayerIndex][0].x + nodeLength + posX - 500 / 2;\n\n    }\n\n    const detailview = document.getElementById('detailview');\n    detailview.style.top = `${detailViewTop}px`;\n    detailview.style.left = `${posX}px`;\n    detailview.style.position = 'absolute';\n\n    // Hide all edges\n    let unimportantEdges = svg.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== curLayerIndex;\n      })\n      .style('visibility', 'hidden');\n    \n    // Disable UI\n    disableControl = true;\n    \n    // Hide input annotaitons\n    svg.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Hide legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg.selectAll('.input-legend').classed('hidden', true);\n    svg.selectAll('.output-legend').classed('hidden', true);\n    svg.select(`#${layerLegendDict[curLayerIndex][selectedScaleLevel]}`)\n      .classed('hidden', false);\n\n    // Add overlay rects\n    let leftX = nodeCoordinate[curLayerIndex - 1][i].x;\n    // +5 to cover the detailed mode long label\n    let rightStart = nodeCoordinate[curLayerIndex][i].x + nodeLength + 5;\n\n    // Compute the left and right overlay rect width\n    let rightWidth = width - rightStart - overlayRectOffset / 2;\n    let leftWidth = leftX - nodeCoordinate[0][0].x;\n\n    // The overlay rects should be symmetric\n    if (rightWidth > leftWidth) {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 1}];\n      addOverlayGradient('overlay-gradient-right', stops);\n      \n      let leftEndOpacity = 0.85 + (0.95 - 0.85) * (leftWidth / rightWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: leftEndOpacity},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n    } else {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 1},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n\n      let rightEndOpacity = 0.85 + (0.95 - 0.85) * (rightWidth / leftWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: rightEndOpacity}];\n      addOverlayGradient('overlay-gradient-right', stops);\n    }\n    \n    addOverlayRect('overlay-gradient-right',\n      rightStart + overlayRectOffset / 2 + 0.5,\n      0, rightWidth, height + svgPaddings.top);\n    \n    addOverlayRect('overlay-gradient-left',\n      nodeCoordinate[0][0].x - overlayRectOffset / 2,\n      0, leftWidth, height + svgPaddings.top);\n\n    svg.selectAll('rect.overlay')\n      .on('click', emptySpaceClicked);\n    \n    // Add underneath rectangles\n    let underGroup = svg.select('g.underneath');\n    let padding = 7;\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      underGroup.append('rect')\n        .attr('class', 'underneath-gateway')\n        .attr('id', `underneath-gateway-${n}`)\n        .attr('x', nodeCoordinate[curLayerIndex - 1][n].x - padding)\n        .attr('y', nodeCoordinate[curLayerIndex - 1][n].y - padding)\n        .attr('width', (2 * nodeLength + hSpaceAroundGap) + 2 * padding)\n        .attr('height', nodeLength + 2 * padding)\n        .attr('rx', 10)\n        .style('fill', 'rgba(160, 160, 160, 0.3)')\n        .style('opacity', 0);\n      \n      // Update the event functions for these two layers\n      svg.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .style('pointer-events', 'all')\n        .style('cursor', 'pointer')\n        .on('mouseover', actPoolDetailViewPreNodeMouseOverHandler)\n        .on('mouseleave', actPoolDetailViewPreNodeMouseLeaveHandler)\n        .on('click', actPoolDetailViewPreNodeClickHandler);\n    }\n    underGroup.lower();\n\n    // Highlight the selcted pair\n    underGroup.select(`#underneath-gateway-${i}`)\n      .style('opacity', 1);\n  }\n\n  const quitIntermediateView = (curLayerIndex, g, i) => {\n    // If it is the softmax detail view, quit that view first\n    if (isInSoftmax) {\n      svg.select('.logit-layer').remove();\n      svg.select('.logit-layer-lower').remove();\n      svg.selectAll('.plus-symbol-clone').remove();\n\n      // Instead of removing the paths, we hide them, so it is faster to load in\n      // the future\n      svg.select('.underneath')\n        .selectAll('.logit-lower')\n        .style('opacity', 0);\n\n      softmaxDetailViewStore.set({\n          show: false,\n          logits: []\n      })\n\n      allowsSoftmaxAnimationStore.set(false);\n    }\n    isInSoftmaxStore.set(false);\n    isInIntermediateView = false;\n\n    // Show the legend\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Recover control panel UI\n    disableControl = false;\n\n    // Recover the input layer node's event\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      svg.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .on('mouseover', nodeMouseOverHandler)\n        .on('mouseleave', nodeMouseLeaveHandler)\n        .on('click', nodeClickHandler);\n    }\n\n    // Clean up the underneath rects\n    svg.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n    detailedViewNum = undefined;\n\n    // Highlight the previous layer and this node\n    svg.select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 1);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 1);\n\n    // Highlight the labels\n    svg.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', 'normal');\n\n    // Also unclick the node\n    // Record the current clicked node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n    isExitedFromCollapse = true;\n\n    // Remove the intermediate layer\n    let intermediateLayer = svg.select('g.intermediate-layer');\n\n    // Kill the infinite animation loop\n    shouldIntermediateAnimateStore.set(false);\n\n    intermediateLayer.transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => { d3.select(g[i]).remove()});\n    \n    // Remove the output node overlay mask\n    svg.selectAll('.overlay-group').remove();\n    \n    // Remove the overlay rect\n    svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg.selectAll('defs.overlay-gradient').remove();\n      });\n    \n    // Recover the layer if we have drdrawn it\n    if (needRedraw[0] !== undefined) {\n      let redrawRange = cnnLayerRanges[selectedScaleLevel][needRedraw[0]];\n      if (needRedraw[1] !== undefined) {\n        svg.select(`g#layer-${needRedraw[0]}-node-${needRedraw[1]}`)\n          .select('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      } else {\n        svg.select(`g#cnn-layer-group-${needRedraw[0]}`)\n          .selectAll('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      }\n    }\n    \n    // Move all layers to their original place\n    for (let i = 0; i < numLayers; i++) {\n      moveLayerX({layerIndex: i, targetX: nodeCoordinate[i][0].x,\n        disable:false, delay:500, opacity: 1});\n    }\n\n    moveLayerX({layerIndex: numLayers - 2,\n      targetX: nodeCoordinate[numLayers - 2][0].x, opacity: 1,\n      disable:false, delay:500, onEndFunc: () => {\n        // Show all edges on the last moving animation end\n        svg.select('g.edge-group')\n          .style('visibility', 'visible');\n\n        // Recover the input annotation\n        svg.select('.input-annotation')\n          .classed('hidden', false);\n      }});\n  }\n\n  const nodeClickHandler = (d, i, g) => {\n    d3.event.stopPropagation();\n    let nodeIndex = d.index;\n\n    // Record the current clicked node\n    selectedNode.layerName = d.layerName;\n    selectedNode.index = d.index;\n    selectedNode.data = d;\n    selectedNode.domI = i;\n    selectedNode.domG = g;\n\n    // Record data for detailed view.\n    if (d.type === 'conv' || d.type === 'relu' || d.type === 'pool') {\n      let data = [];\n      for (let j = 0; j < d.inputLinks.length; j++) {\n        data.push({\n          input: d.inputLinks[j].source.output,\n          kernel: d.inputLinks[j].weight,\n          output: d.inputLinks[j].dest.output,\n        })\n      }\n      let curLayerIndex = layerIndexDict[d.layerName];\n      data.colorRange = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      data.isInputInputLayer = curLayerIndex <= 1;\n      nodeData = data;\n    }\n\n    let curLayerIndex = layerIndexDict[d.layerName];\n\n    if (d.type == 'relu' || d.type == 'pool') {\n      isExitedFromDetailedView = false;\n      if (!isInActPoolDetailView) {\n        // Enter the act pool detail view\n        enterDetailView(curLayerIndex, d.index);\n      } else {\n        if (d.index === actPoolDetailViewNodeIndex) {\n          // Quit the act pool detail view\n          quitActPoolDetailView();\n        } else {\n          // Switch the detail view input to the new clicked pair\n\n          // Remove the previous selection effect\n          svg.select(`g#layer-${curLayerIndex}-node-${actPoolDetailViewNodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', true);\n\n          svg.select(`g#layer-${curLayerIndex - 1}-node-${actPoolDetailViewNodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', true);\n          \n          let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n      \n          edgeGroup.selectAll(`path.edge-${curLayerIndex}-${actPoolDetailViewNodeIndex}`)\n            .transition()\n            .ease(d3.easeCubicOut)\n            .duration(200)\n            .style('stroke', edgeInitColor)\n            .style('stroke-width', edgeStrokeWidth)\n            .style('opacity', edgeOpacity);\n          \n          let underGroup = svg.select('g.underneath');\n          underGroup.select(`#underneath-gateway-${actPoolDetailViewNodeIndex}`)\n            .style('opacity', 0);\n        \n          // Add selection effect on the new selected pair\n          svg.select(`g#layer-${curLayerIndex}-node-${nodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', false);\n\n          svg.select(`g#layer-${curLayerIndex - 1}-node-${nodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', false);\n\n          edgeGroup.selectAll(`path.edge-${curLayerIndex}-${nodeIndex}`)\n            .raise()\n            .transition()\n            .ease(d3.easeCubicInOut)\n            .duration(400)\n            .style('stroke', edgeHoverColor)\n            .style('stroke-width', '1')\n            .style('opacity', 1);\n\n          underGroup.select(`#underneath-gateway-${nodeIndex}`)\n            .style('opacity', 1);\n\n          actPoolDetailViewNodeIndex = nodeIndex;\n        }\n      }\n    }\n\n    // Enter the second view (layer-view) when user clicks a conv node\n    if ((d.type === 'conv' || d.layerName === 'output') && !isInIntermediateView) {\n      prepareToEnterIntermediateView(d, g, nodeIndex, curLayerIndex);\n\n      if (d.layerName === 'conv_1_1') {\n        drawConv1(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n\n      else if (d.layerName === 'conv_1_2') {\n        drawConv2(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n\n      else if (d.layerName === 'conv_2_1') {\n        drawConv3(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n      \n      else if (d.layerName === 'conv_2_2') {\n        drawConv4(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n    \n      else if (d.layerName === 'output') {\n        drawFlatten(curLayerIndex, d, nodeIndex, width, height);\n      }\n    }\n    // Quit the layerview\n    else if ((d.type === 'conv' || d.layerName === 'output') && isInIntermediateView) {\n      quitIntermediateView(curLayerIndex, g, i);\n    }\n  }\n\n  const nodeMouseOverHandler = (d, i, g) => {\n    // if (isInIntermediateView || isInActPoolDetailView) { return; }\n    if (isInIntermediateView) { return; }\n\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    \n    // Highlight source's border\n    if (d.inputLinks.length === 1) {\n      let link = d.inputLinks[0];\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    } else {\n      svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n        .selectAll('g.node-group')\n        .selectAll('rect.bounding')\n        .classed('hidden', false);\n    }\n\n    // Highlight the output text\n    if (d.layerName === 'output') {\n      d3.select(g[i])\n        .select('.output-text')\n        .style('opacity', 0.8)\n        .style('text-decoration', 'underline');\n    }\n\n    /* Use the following commented code if we have non-linear model\n    d.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    });\n    */\n  }\n\n  const nodeMouseLeaveHandler = (d, i, g) => {\n    // Screenshot\n    // return;\n\n    if (isInIntermediateView) { return; }\n    \n    // Keep the highlight if user has clicked\n    if (isInActPoolDetailView || (\n      d.layerName !== selectedNode.layerName ||\n      d.index !== selectedNode.index)){\n      let layerIndex = layerIndexDict[d.layerName];\n      let nodeIndex = d.index;\n      let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n      \n      edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n        .transition()\n        .ease(d3.easeCubicOut)\n        .duration(200)\n        .style('stroke', edgeInitColor)\n        .style('stroke-width', edgeStrokeWidth)\n        .style('opacity', edgeOpacity);\n\n      d3.select(g[i]).select('rect.bounding').classed('hidden', true);\n\n      if (d.inputLinks.length === 1) {\n        let link = d.inputLinks[0];\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      } else {\n        svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n          .selectAll('g.node-group')\n          .selectAll('rect.bounding')\n          .classed('hidden', d => d.layerName !== selectedNode.layerName ||\n            d.index !== selectedNode.index);\n      }\n\n      // Dehighlight the output text\n      if (d.layerName === 'output') {\n        d3.select(g[i])\n          .select('.output-text')\n          .style('fill', 'black')\n          .style('opacity', 0.5)\n          .style('text-decoration', 'none');\n      }\n\n      /* Use the following commented code if we have non-linear model\n      d.inputLinks.forEach(link => {\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      });\n      */\n    }\n  }\n  \n  let logits = [-4.28, 2.96, -0.38, 5.24, -7.56, -3.43, 8.63, 2.63, 6.30, 0.68];\n  let selectedI = 4;\n\n  onMount(async () => {\n    // Create SVG\n    wholeSvg = d3.select(overviewComponent)\n      .select('#cnn-svg');\n    svg = wholeSvg.append('g')\n      .attr('class', 'main-svg')\n      .attr('transform', `translate(${svgPaddings.left}, 0)`);\n    svgStore.set(svg);\n\n    width = Number(wholeSvg.style('width').replace('px', '')) -\n      svgPaddings.left - svgPaddings.right;\n    height = Number(wholeSvg.style('height').replace('px', '')) -\n      svgPaddings.top - svgPaddings.bottom;\n\n    let cnnGroup = svg.append('g')\n      .attr('class', 'cnn-group');\n    \n    let underGroup = svg.append('g')\n      .attr('class', 'underneath');\n\n    let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n    detailedViewAbsCoords = {\n      1 : [600, 100 + svgYMid - 220 / 2, 490, 290],\n      2: [500, 100 + svgYMid - 220 / 2, 490, 290],\n      3 : [700, 100 + svgYMid - 220 / 2, 490, 290],\n      4: [600, 100 + svgYMid - 220 / 2, 490, 290],\n      5: [650, 100 + svgYMid - 220 / 2, 490, 290],\n      6 : [850, 100 + svgYMid - 220 / 2, 490, 290],\n      7 : [100, 100 + svgYMid - 220 / 2, 490, 290],\n      8 : [60, 100 + svgYMid - 220 / 2, 490, 290],\n      9 : [200, 100 + svgYMid - 220 / 2, 490, 290],\n      10 : [300, 100 + svgYMid - 220 / 2, 490, 290],\n    }\n    \n    // Define global arrow marker end\n    svg.append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", 'marker')\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style('stroke-width', 1.2)\n      .style('fill', 'gray')\n      .style('stroke', 'gray')\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n    // Alternative arrow head style for non-interactive annotation\n    svg.append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", 'marker-alt')\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style('fill', 'none')\n      .style('stroke', 'gray')\n      .style('stroke-width', 2)\n      .attr(\"d\", \"M-5,-10L10,0L-5,10\");\n    \n    console.time('Construct cnn');\n    model = await loadTrainedModel('PUBLIC_URL/assets/data/model.json');\n    console.log(\"The cnn model is: \", model);\n    cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n    console.timeEnd('Construct cnn');\n    cnnStore.set(cnn);\n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 2];\n    cnn.splice(cnn.length - 2, 1);\n    cnn.flatten = flatten;\n\n    console.log('cnn layers are: ', cnn);\n\n    updateCNNLayerRanges();\n\n    console.log(\"cnn layer ranges and MinMax are: \", \n      cnnLayerRanges, cnnLayerMinMax);\n\n    // Create and draw the CNN view\n    drawCNN(width, height, cnnGroup, nodeMouseOverHandler,\n      nodeMouseLeaveHandler, nodeClickHandler);\n  })\n\n  const detailedButtonClicked = () => {\n    detailedMode = !detailedMode;\n    detailedModeStore.set(detailedMode);\n\n    if (!isInIntermediateView){\n      // Show the legend\n      svg.selectAll(`.${selectedScaleLevel}-legend`)\n        .classed('hidden', !detailedMode);\n      \n      svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n      svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n    }\n    \n    // Switch the layer name\n    svg.selectAll('.layer-detailed-label')\n      .classed('hidden', !detailedMode);\n    \n    svg.selectAll('.layer-label')\n      .classed('hidden', detailedMode);\n  }\n\n  const imageOptionClicked = async (e) => {\n    let newImageName = d3.select(e.target).attr('data-imageName');\n\n    if (newImageName !== selectedImage) {\n      selectedImage = newImageName;\n\n      // Re-compute the CNN using the new input image\n      cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n\n      // Ignore the flatten layer for now\n      let flatten = cnn[cnn.length - 2];\n      cnn.splice(cnn.length - 2, 1);\n      cnn.flatten = flatten;\n      cnnStore.set(cnn);\n\n      // Update all scales used in the CNN view\n      updateCNNLayerRanges();\n      updateCNN();\n    }\n  }\n\n  const customImageClicked = () => {\n\n    // Case 1: there is no custom image -> show the modal to get user input\n    if (customImageURL === null) {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    // Case 2: there is an existing custom image, not the focus -> switch to this image\n    else if (selectedImage !== 'custom') {\n      let fakeEvent = {detail: {url: customImageURL}};\n      handleCustomImage(fakeEvent);\n    }\n\n    // Case 3: there is an existing custom image, and its the focus -> let user\n    // upload a new image\n    else {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    if (selectedImage !== 'custom') {\n      selectedImage = 'custom';\n    }\n\n  }\n\n  const handleModalCanceled = (event) => {\n    // User cancels the modal without a successful image, so we restore the\n    // previous selected image as input\n    selectedImage = event.detail.preImage;\n  }\n\n  const handleCustomImage = async (event) => {\n    // User gives a valid image URL\n    customImageURL = event.detail.url;\n\n    // Re-compute the CNN using the new input image\n    cnn = await constructCNN(customImageURL, model);\n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 2];\n    cnn.splice(cnn.length - 2, 1);\n    cnn.flatten = flatten;\n    cnnStore.set(cnn);\n\n    // Update the UI\n    let customImageSlot = d3.select(overviewComponent)\n      .select('.custom-image').node();\n    drawCustomImage(customImageSlot, cnn[0]);\n\n    // Update all scales used in the CNN view\n    updateCNNLayerRanges();\n    updateCNN();\n  }\n\n  function handleExitFromDetiledConvView(event) {\n    if (event.detail.text) {\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${selectedNodeIndex}`)\n        .style('opacity', 0);\n      selectedNodeIndex = -1; \n    }\n  }\n\n  function handleExitFromDetiledPoolView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledActivationView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledSoftmaxView(event) {\n    softmaxDetailViewInfo.show = false;\n    softmaxDetailViewStore.set(softmaxDetailViewInfo);\n  }\n\n</script>\n\n<style>\n  .overview {\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n\n  .control-container {\n    padding: 5px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .right-control {\n    display: flex;\n  }\n\n  .left-control {\n    display: flex;\n    align-items: center;\n  }\n\n  .control > .select > #level-select {\n    padding-left: 2em;\n    padding-right: 2em;\n  }\n\n  .cnn {\n    width: 100%;\n    padding: 0;\n    background: var(--light-gray);\n    display: flex;\n  }\n\n  svg {\n    margin: 0 auto;\n    min-height: 490px;\n    max-height: 700px;\n    height: calc(100vh - 100px);\n    width: 100vw;\n  }\n\n  .is-very-small {\n    font-size: 12px;\n  }\n\n  #detailed-button {\n    margin-right: 10px;\n    color: #dbdbdb;\n    transition: border-color 300ms ease-in-out, color 200ms ease-in-out;\n  }\n\n  #detailed-button.is-activated, #detailed-button.is-activated:hover {\n    color: #3273dc;\n    border-color: #3273dc;\n  }\n\n  #detailed-button:hover {\n    color: #b5b5b5;\n  }\n\n  #hover-label {\n    transition: opacity 300ms ease-in-out;\n    text-overflow: ellipsis;\n    pointer-events: none;\n    margin-left: 5px;\n  }\n\n  .image-container {\n    width: 40px;\n    height: 40px;\n    border-radius: 4px;\n    display: inline-block;\n    position: relative;\n    border: 2.5px solid #1E1E1E;\n    margin-right: 10px;\n    cursor: pointer;\n    pointer-events: all;\n    transition: border 300ms ease-in-out;\n  }\n\n  .image-container img {\n    object-fit: cover;\n    max-width: 100%;\n    max-height: 100%;\n    z-index: -1;\n    transition: opacity 300ms ease-in-out;\n  }\n\n  .image-container.inactive {\n    border: 2.5px solid rgb(220, 220, 220);\n  }\n\n  .image-container.inactive > img {\n    opacity: 0.3;\n  }\n\n  .image-container.inactive:hover > img {\n    opacity: 0.6;\n  }\n\n  .image-container.inactive.disabled {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive > .edit-icon {\n    color: #BABABA;\n  }\n\n  .image-container.inactive:hover > .edit-icon {\n    color: #777777;\n  }\n\n  .image-container.inactive:hover {\n    border: 2.5px solid #1E1E1E;\n  }\n\n  .edit-icon {\n    position: absolute;\n    bottom: -6px;\n    right: -7px;\n    font-size: 7px;\n    color: #1E1E1E;\n    transition: color 300ms ease-in-out;\n  }\n\n  :global(canvas) {\n    image-rendering: crisp-edges;\n  }\n\n  :global(.layer-label, .layer-detailed-label, .layer-intermediate-label) {\n    font-size: 12px;\n    opacity: 0.8;\n    text-anchor: middle;\n  }\n\n  :global(.colorLegend) {\n    font-size: 10px;\n  }\n\n  :global(.legend) {\n    transition: opacity 400ms ease-in-out;\n  }\n\n  :global(.legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.legend text, .legend line, .legend path) {\n    opacity: 0.7;\n  }\n\n  :global(.legend#output-legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.hidden) {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  :global(.very-strong) {\n    stroke-width: 3px;\n  }\n\n  :global(.bounding, .edge, .edge-group, foreignObject, .bounding-flatten,\n    .underneath-gateway, .input-annotation) {\n    transition: opacity 300ms ease-in-out;\n  }\n\n  :global(rect.bounding) {\n    transition: stroke-width 800ms ease-in-out, opacity 300ms ease-in-out;\n  }\n\n  :global(.annotation-text) {\n    pointer-events: none;\n    font-size: 10px;\n    font-style: italic;\n    fill: gray;\n  }\n\n  /* Change the cursor style on the detailed view input and output matrices */\n  :global(rect.square) {\n    cursor: crosshair;\n  }\n\n  :global(.animation-control-button) {\n    font-family: FontAwesome;\n    opacity: 0.8;\n    cursor: pointer;\n  }\n\n</style>\n\n<div class=\"overview\"\n  bind:this={overviewComponent}>\n\n  <div class=\"control-container\">\n\n    <div class=\"left-control\">\n      {#each imageOptions as image, i}\n        <div class=\"image-container\"\n          on:click={disableControl ? () => {} : imageOptionClicked}\n          class:inactive={selectedImage !== image.file}\n          class:disabled={disableControl}\n          data-imageName={image.file}>\n          <img src=\"PUBLIC_URL/assets/img/{image.file}\"\n            alt=\"image option\"\n            title=\"{image.class}\"\n            data-imageName={image.file}/>\n        </div>\n      {/each}\n\n      <!-- The plus button -->\n        <div class=\"image-container\"\n          class:inactive={selectedImage !== 'custom'}\n          class:disabled={disableControl}\n          data-imageName={'custom'}\n          on:click={disableControl ? () => {} : customImageClicked}>\n\n          <img class=\"custom-image\"\n            src=\"PUBLIC_URL/assets/img/plus.svg\"\n            alt=\"plus button\"\n            title=\"Add new input image\"\n            data-imageName=\"custom\"/>\n\n          <span class=\"fa-stack edit-icon\"\n            class:hidden={customImageURL === null}>\n            <i class=\"fas fa-circle fa-stack-2x\"></i>\n            <i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i>\n          </span>\n\n        </div>\n\n      <button class=\"button is-very-small is-link is-light\"\n        id=\"hover-label\"\n        style=\"opacity:{hoverInfo.show ? 1 : 0}\">\n        <span class=\"icon\" style=\"margin-right: 5px;\">\n          <i class=\"fas fa-crosshairs \"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          {hoverInfo.text}\n        </span>\n      </button>\n    </div>\n\n    <div class=\"right-control\">\n\n      <button class=\"button is-very-small\"\n        id=\"detailed-button\"\n        disabled={disableControl}\n        class:is-activated={detailedMode}\n        on:click={detailedButtonClicked}>\n        <span class=\"icon\">\n          <i class=\"fas fa-eye\"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          Show detail\n        </span>\n      </button>\n\n      <div class=\"control is-very-small has-icons-left\"\n        title=\"Change color scale range\">\n        <span class=\"icon is-left\">\n          <i class=\"fas fa-palette\"></i>\n        </span>\n\n        <div class=\"select\">\n          <select bind:value={selectedScaleLevel} id=\"level-select\"\n            disabled={disableControl}>\n            <option value=\"local\">Unit</option>\n            <option value=\"module\">Module</option>\n            <option value=\"global\">Global</option>\n          </select>\n        </div>\n      </div>\n\n    </div>\n    \n  </div>\n\n  <div class=\"cnn\">\n    <svg id=\"cnn-svg\"></svg>\n  </div>\n</div>\n\n<Article/>\n\n<div id='detailview'>\n  {#if selectedNode.data && selectedNode.data.type === 'conv' && selectedNodeIndex != -1}\n    <ConvolutionView on:message={handleExitFromDetiledConvView} input={nodeData[selectedNodeIndex].input} \n                      kernel={nodeData[selectedNodeIndex].kernel}\n                      dataRange={nodeData.colorRange}\n                      colorScale={nodeData.inputIsInputLayer ?\n                        layerColorScales.input[0] : layerColorScales.conv}\n                      isInputInputLayer={nodeData.inputIsInputLayer}\n                      isExited={isExitedFromCollapse}/>\n  {:else if selectedNode.data && selectedNode.data.type === 'relu'}\n    <ActivationView on:message={handleExitFromDetiledActivationView} input={nodeData[0].input} \n                    output={nodeData[0].output}\n                    dataRange={nodeData.colorRange}\n                    isExited={isExitedFromDetailedView}/>\n  {:else if selectedNode.data && selectedNode.data.type === 'pool'}\n    <PoolView on:message={handleExitFromDetiledPoolView} input={nodeData[0].input} \n              kernelLength={2}\n              dataRange={nodeData.colorRange}\n              isExited={isExitedFromDetailedView}/>\n  {:else if softmaxDetailViewInfo.show}\n    <SoftmaxView logits={softmaxDetailViewInfo.logits}\n                 logitColors={softmaxDetailViewInfo.logitColors}\n                 selectedI={softmaxDetailViewInfo.selectedI}\n                 highlightI={softmaxDetailViewInfo.highlightI}\n                 outputName={softmaxDetailViewInfo.outputName}\n                 outputValue={softmaxDetailViewInfo.outputValue}\n                 startAnimation={softmaxDetailViewInfo.startAnimation}\n                 on:xClicked={handleExitFromDetiledSoftmaxView}\n                 on:mouseOver={softmaxDetailViewMouseOverHandler}\n                 on:mouseLeave={softmaxDetailViewMouseLeaveHandler}/>\n  {/if}\n</div>\n\n<Modal on:xClicked={handleModalCanceled}\n  on:urlTyped={handleCustomImage}/>",
    "<script>\n  // Svelte functions\n  import { onMount } from 'svelte';\n  import { \n    rnnStore, rnnLayerMinMaxStore, rnnLayerRangesStore, \n    svgStore_rnn, vSpaceAroundGapStore_rnn, hSpaceAroundGapStore_rnn,\n    nodeCoordinateStore_rnn, selectedScaleLevelStore_rnn, needRedrawStore_rnn,\n    detailedModeStore_rnn, shouldIntermediateAnimateStore_rnn, isInSigmoidStore_rnn, \n    sigmoidDetailViewStore_rnn, hoverInfoStore_rnn, allowsSigmoidAnimationStore_rnn, \n    intermediateLayerPositionStore_rnn, reviewArrayStore\n  } from '../stores.js';\n\n  import { Jumper } from 'svelte-loading-spinners';\n\n  // Svelte views\n  import SigmoidView from '../detail-view/Sigmoidview.svelte';\n  import EmbeddingView from '../detail-view/Embeddingview.svelte';\n\n  const HOSTED_URLS = {\n    model:\n        'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n    metadata:\n        'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n  };\n\n  const LOCAL_URLS = {\n    model: 'PUBLIC_URL/resources/model.json',\n    metadata: 'PUBLIC_URL/resources/metadata.json'\n  };\n\n  // Overview functions\n  import { loadTrainedModel_rnn, SentimentPredictor } from '../utils/rnn-tf.js';\n\n  import { rnnOverviewConfig } from '../config.js';\n\n  import {\n    addOverlayRect, drawConv1, drawConv2, drawConv3, drawConv4\n  } from './intermediate-drawRNN.js';\n\n  import { moveLayerX, addOverlayGradient } from './intermediateRNN-utils.js';\n\n  import {\n    drawDense, sigmoidDetailViewMouseOverHandler, sigmoidDetailViewMouseLeaveHandler\n  } from './Dense-draw.js';\n\n  import {\n    drawOutputRNN, drawRNN, updateRNN, updateRNNLayerRanges\n  } from './overview-drawRNN.js';\n\n  // View bindings\n  let rnnOverviewComponent;\n  let scaleLevelSet = new Set(['local', 'module', 'global']);\n  let selectedScaleLevel = 'local';\n  selectedScaleLevelStore_rnn.set(selectedScaleLevel);\n  let previousSelectedScaleLevel = selectedScaleLevel;\n  let overview = undefined;\n  let wholeSvg_rnn = undefined;\n  let svg_rnn = undefined;\n\n  // let wholeSvg_cnn = undefined;\n  // let svg_cnn = undefined;\n\n  $: selectedScaleLevel, selectedScaleLevelChanged();\n\n  // Configs\n  const layerColorScales = rnnOverviewConfig.layerColorScales;\n  const nodeLength = rnnOverviewConfig.nodeLength;\n  const embbedingLength = rnnOverviewConfig.embedddingLength;\n  const inputNodeHeight = rnnOverviewConfig.inputNodeHeight;\n  const plusSymbolRadius = rnnOverviewConfig.plusSymbolRadius;\n  const numLayers = rnnOverviewConfig.numLayers;\n  const edgeOpacity = rnnOverviewConfig.edgeOpacity;\n  const edgeInitColor = rnnOverviewConfig.edgeInitColor;\n  const edgeHoverColor = rnnOverviewConfig.edgeHoverColor;\n  const edgeHoverOuting = rnnOverviewConfig.edgeHoverOuting;\n  const edgeStrokeWidth = rnnOverviewConfig.edgeStrokeWidth;\n  const intermediateColor = rnnOverviewConfig.intermediateColor;\n  const kernelRectLength = rnnOverviewConfig.kernelRectLength;\n  const svgPaddings = rnnOverviewConfig.svgPaddings;\n  const gapRatio = rnnOverviewConfig.gapRatio;\n  const overlayRectOffset = rnnOverviewConfig.overlayRectOffset;\n  const classLists = rnnOverviewConfig.classLists;\n\n  // Shared properties\n  // for rnn\n  let needRedraw = [undefined, undefined];\n  needRedrawStore_rnn.subscribe( value => {needRedraw = value;} );\n\n  let nodeCoordinate = undefined;\n  nodeCoordinateStore_rnn.subscribe( value => {nodeCoordinate = value;} )\n\n  let rnnLayerRanges = undefined;\n  rnnLayerRangesStore.subscribe( value => {rnnLayerRanges = value;} )\n\n  let rnnLayerMinMax = undefined;\n  rnnLayerMinMaxStore.subscribe( value => {rnnLayerMinMax = value;} )\n\n  let detailedMode = undefined;\n  detailedModeStore_rnn.subscribe( value => {detailedMode = value;} )\n\n  let shouldIntermediateAnimate_rnn = undefined;\n  shouldIntermediateAnimateStore_rnn.subscribe(value => {\n    shouldIntermediateAnimate_rnn = value;\n  })\n\n  let vSpaceAroundGap_rnn = undefined;\n  vSpaceAroundGapStore_rnn.subscribe( value => {vSpaceAroundGap_rnn = value;} )\n\n  let hSpaceAroundGap_rnn = undefined;\n  hSpaceAroundGapStore_rnn.subscribe( value => {hSpaceAroundGap_rnn = value;} )\n\n  let isInSigmoid = undefined;\n  isInSigmoidStore_rnn.subscribe( value => {isInSigmoid = value;} )\n\n  let sigmoidDetailViewInfo = undefined;\n  sigmoidDetailViewStore_rnn.subscribe( value => {\n    sigmoidDetailViewInfo = value;\n  } )\n\n  let hoverInfo_rnn = undefined;\n  hoverInfoStore_rnn.subscribe( value => {hoverInfo_rnn = value;} )\n\n  let intermediateLayerPosition_rnn = undefined;\n  intermediateLayerPositionStore_rnn.subscribe ( value => {\n    intermediateLayerPosition_rnn = value;} )\n\n  let reviewArray = undefined;\n  reviewArrayStore.subscribe( value=> {reviewArray = value;})\n\n  let width = undefined;\n  let height = undefined;\n  // let model = undefined;\n  // lstm\n  let model_lstm = undefined;\n  let selectedNode = {layerName: '', index: -1, data: null};\n  let isInIntermediateView = false;\n  let isInActPoolDetailView = false;\n  let actPoolDetailViewNodeIndex = -1;\n  let actPoolDetailViewLayerIndex = -1;\n  let detailedViewNum = undefined;\n  let disableControl = false;\n\n  // Wait to load\n  let rnn = undefined;\n  // let isRNNloaded = false;\n\n  let detailedViewAbsCoords = {\n    1 : [600, 270, 490, 290],\n    2: [500, 270, 490, 290],\n    // 3 : [700, 270, 490, 290],\n    // 4: [600, 270, 490, 290],\n    // 5: [650, 270, 490, 290],\n    // 6 : [775, 270, 490, 290],\n    // 7 : [100, 270, 490, 290],\n    // 8 : [60, 270, 490, 290],\n    // 9 : [200, 270, 490, 290],\n    // 10 : [300, 270, 490, 290],\n  }\n\n  const layerIndexDict = {\n    'input': 0,\n    'embedding_Embedding1': 1,\n    'lstm_LSTM1': 2,\n    'dense_Dense1': 3\n  }\n\n  const layerLegendDict = {\n    0: {local: 'input-legend', module: 'input-legend', global: 'input-legend'},\n    1: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    2: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    3: {local: 'output-legend', module: 'output-legend', global: 'output-legend'}\n  }\n\n  const defaultInputContent = 'Please input your review within 100 words.';\n  const exampleReviews = {\n    'input': defaultInputContent,\n    'empty': 'Helpless Waiting... The text here is for testing as rendering 100 words representation will cost much time I will seek to improve the response speed later',\n    'positive':\n      `die hard mario fan and i loved this game br br this game starts slightly boring but trust me it\\'s worth it as soon as you start your hooked the levels are fun and exiting they will hook you OOV your mind turns to mush i\\'m not kidding this game is also orchestrated and is beautifully done br br to keep this spoiler free i have to keep my mouth shut about details but please try this game it\\'ll be worth it br br story 9 9 action 10 1 it\\'s that good OOV 10 attention OOV 10 average 10`,\n    'negative':\n      `the mother in this movie is reckless with her children to the point of neglect i wish i wasn\\'t so angry about her and her actions because i would have otherwise enjoyed the flick what a number she was take my advise and fast forward through everything you see her do until the end also is anyone else getting sick of watching movies that are filmed so dark anymore one can hardly see what is being filmed as an audience we are impossibly involved with the actions on the screen so then why the hell can\\'t we have night vision`\n  };\n  let selectedReview = 'negative';\n  let reviewContent;\n  let previousSelectedReview = selectedReview;\n  let predictor;\n  let inputDim;\n\n  let nodeData;\n  let selectedNodeIndex = -1;\n  let isExitedFromDetailedView = true;\n  let isExitedFromCollapse = true;\n\n  // Helper functions\n  const selectedScaleLevelChanged = () => {\n    if (svg_rnn !== undefined) {\n      if (!scaleLevelSet.add(selectedScaleLevel)) {\n        console.error('Encounter unknown scale level!');\n      }\n\n      // Update nodes and legends\n      if (selectedScaleLevel != previousSelectedScaleLevel){\n        // We can simply redraw all nodes using the new color scale, or we can\n        // make it faster by only redraw certian nodes\n        let updatingLayerIndexDict = {\n          local: {\n            module: [1, 2],\n            global: [1, 2, 3, 4]\n          },\n          module: {\n            local: [1, 2],\n            global: [1, 2, 3, 4]\n          },\n          global: {\n            local: [1, 2, 3, 4],\n            module: [1, 2, 3, 4]\n          }\n        };\n\n        let updatingLayerIndex = updatingLayerIndexDict[\n          previousSelectedScaleLevel][selectedScaleLevel];\n\n        updatingLayerIndex.forEach(l => {\n          let range = rnnLayerRanges[selectedScaleLevel][l];\n          svg_rnn.select(`#rnn-layer-group-${l}`)\n            .selectAll('.node-image')\n            .each((d, i, g) => drawOutputRNN(d, i, g, range));\n        });\n\n \n        // Hide previous legend\n        svg_rnn.selectAll(`.${previousSelectedScaleLevel}-legend`)\n          .classed('hidden', true);\n\n        // Show selected legends\n        svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n          .classed('hidden', !detailedMode);\n      }\n      previousSelectedScaleLevel = selectedScaleLevel;\n      selectedScaleLevelStore_rnn.set(selectedScaleLevel);\n    }\n  }\n\n  // update RNN and Interface\n  const updateRNNbasedonStoredReview = async () => {\n    // isRNNloaded = false;\n    console.time('Construct rnn');\n    rnn = await predictor.constructNN(exampleReviews[selectedReview], model_lstm);\n    console.timeEnd('Construct rnn');\n    // isRNNloaded = true;\n\n    let lstm = rnn[rnn.length -2];\n    rnn.lstm = lstm;\n    // rnn.rawInput = rnn[0];\n    // rnn[0] = rnn.nonPadInput;\n    rnnStore.set(rnn);\n    console.log('rnn layers are: ', rnn);\n\n    reviewArray = predictor.inputArray;\n    reviewArrayStore.set(reviewArray);\n\n    updateRNNLayerRanges(inputDim);\n    console.log(\"rnn layer ranges and MinMax are: \", \n      rnnLayerRanges, rnnLayerMinMax);\n\n    updateRNN(); \n  } \n\n  // clear the content when focus into textarea div\n  const focusReviewContent = async() => {\n    if (reviewContent === defaultInputContent) {\n      reviewContent = '';\n    } \n  }\n\n  // update RNN and interface when review content changed by users\n  const reviewContentChanged = async ()=>{\n      if (reviewContent.trim()===''){\n        console.log('The current review content is empty, please write down your review.')\n      } else if (reviewContent.trim() === exampleReviews[selectedReview]){\n        console.log('The current Review content does not change');\n      } else {\n        exampleReviews[selectedReview] = reviewContent.trim();\n        updateRNNbasedonStoredReview();\n      }\n  }\n\n  // update RNN and interface when choose other options\n  const reviewOptionClicked = async ()=>{\n    if (selectedReview === previousSelectedReview) {\n      console.log('The current Review Option does not change');           \n    } else {\n      previousSelectedReview = selectedReview;\n      reviewContent = exampleReviews[selectedReview]; \n      console.log('The current Review is: ', selectedReview);\n      console.log('The reviewContent is: ', reviewContent);\n\n      if (selectedReview !== 'input'){   \n        d3.select('#review-content')\n          .attr('contenteditable', 'false'); \n        updateRNNbasedonStoredReview();\n\n      } else {\n        d3.select('#review-content')\n          .attr('contenteditable', 'true'); \n          if (reviewContent !== defaultInputContent) {\n            updateRNNbasedonStoredReview();\n          }\n      }      \n    }\n  }\n\n  // handle the event when click the detail button\n  const detailedButtonClicked = () => {\n    detailedMode = !detailedMode;\n    detailedModeStore_rnn.set(detailedMode);\n\n    if (!isInIntermediateView){\n      // Show the legend\n      svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n        .classed('hidden', !detailedMode);\n      \n      svg_rnn.selectAll('.input-legend').classed('hidden', !detailedMode);\n      svg_rnn.selectAll('.output-legend').classed('hidden', !detailedMode);\n    }\n    \n    // Switch the layer name\n    svg_rnn.selectAll('.layer-detailed-label')\n      .classed('hidden', !detailedMode);\n    \n    svg_rnn.selectAll('.layer-label')\n      .classed('hidden', detailedMode);\n  }\n\n  // The order of the if/else statements in this function is very critical\n  const emptySpaceClicked = () => {\n    // If detail view -> rewind to intermediate view\n    if (detailedViewNum !== undefined) {\n          // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      svg_rnn.select(`rect#underneath-gateway-${detailedViewNum}`)\n        .style('opacity', 0);\n      detailedViewNum = undefined;\n    }\n\n    // If sigmoid view -> rewind to flatten layer view\n    else if (isInSigmoid) {\n      svg_rnn.select('.sigmoid-symbol')\n        .dispatch('click');\n    }\n\n    // If intermediate view -> rewind to overview\n    else if (isInIntermediateView) {\n      let curLayerIndex = layerIndexDict[selectedNode.layerName];\n      quitIntermediateView(curLayerIndex, selectedNode.domG, selectedNode.domI);\n      d3.select(selectedNode.domG[selectedNode.domI])\n        .dispatch('mouseleave');\n    }\n\n    // If pool/act detail view -> rewind to overview\n    else if (isInActPoolDetailView) {\n      quitActPoolDetailView();\n    }\n  }\n\n  const quitIntermediateView = (curLayerIndex, g, i) => {\n    // If it is the sigmoid detail view, quit that view first\n    if (isInSigmoid) {\n      svg_rnn.select('.logit-layer').remove();\n      svg_rnn.select('.logit-layer-lower').remove();\n      svg_rnn.selectAll('.plus-symbol-clone').remove();\n\n      // Instead of removing the paths, we hide them, so it is faster to load in\n      // the future\n      svg_rnn.select('.underneath')\n        .selectAll('.logit-lower')\n        .style('opacity', 0);\n\n      sigmoidDetailViewStore_rnn.set({\n          show: false,\n          logits: []\n      })\n\n      allowsSigmoidAnimationStore.set(false);\n    }\n    isInSigmoidStore_rnn.set(false);\n    isInIntermediateView = false;\n\n    // Show the legend\n    svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg_rnn.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg_rnn.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Recover control panel UI\n    disableControl = false;\n\n    // Recover the input layer node's event\n    for (let n = 0; n < rnn[curLayerIndex - 1].length; n++) {\n      svg_rnn.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .on('mouseover', nodeMouseOverHandler)\n        .on('mouseleave', nodeMouseLeaveHandler)\n        .on('click', nodeClickHandler);\n    }\n\n    // Clean up the underneath rects\n    svg_rnn.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n    detailedViewNum = undefined;\n\n    // Highlight the previous layer and this node\n    svg_rnn.select(`g#rnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 1);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 1);\n\n    // Highlight the labels\n    svg_rnn.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', 'normal');\n\n    // Also unclick the node\n    // Record the current clicked node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n    isExitedFromCollapse = true;\n\n    // Remove the intermediate layer\n    let intermediateLayer = svg_rnn.select('g.intermediate-layer');\n\n    // Kill the infinite animation loop\n    shouldIntermediateAnimateStore_rnn.set(false);\n\n    intermediateLayer.transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => { d3.select(g[i]).remove()});\n    \n    // Remove the output node overlay mask\n    svg_rnn.selectAll('.overlay-group').remove();\n    \n    // Remove the overlay rect\n    svg_rnn.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg_rnn.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg_rnn.selectAll('defs.overlay-gradient').remove();\n      });\n    \n    // Recover the layer if we have drdrawn it\n    if (needRedraw[0] !== undefined) {\n      let redrawRange = rnnLayerRanges[selectedScaleLevel][needRedraw[0]];\n      if (needRedraw[1] !== undefined) {\n        svg_rnn.select(`g#layer-${needRedraw[0]}-node-${needRedraw[1]}`)\n          .select('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      } else {\n        svg_rnn.select(`g#rnn-layer-group-${needRedraw[0]}`)\n          .selectAll('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      }\n    }\n    \n    // Move all layers to their original place\n    for (let i = 0; i < numLayers; i++) {\n      moveLayerX({layerIndex: i, targetX: nodeCoordinate[i][0].x,\n        disable:false, delay:500, opacity: 1});\n    }\n\n    moveLayerX({layerIndex: numLayers - 2,\n      targetX: nodeCoordinate[numLayers - 2][0].x, opacity: 1,\n      disable:false, delay:500, onEndFunc: () => {\n        // Show all edges on the last moving animation end\n        svg_rnn.select('g.edge-group')\n          .style('visibility', 'visible');\n\n        // Recover the input annotation\n        svg_rnn.select('.input-annotation')\n          .classed('hidden', false);\n      }});\n  }\n\n  const quitActPoolDetailView = () => {\n    isInActPoolDetailView = false;\n    actPoolDetailViewNodeIndex = -1;\n\n    let layerIndex = layerIndexDict[selectedNode.layerName];\n    let nodeIndex = selectedNode.index;\n    svg_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n\n    selectedNode.data.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', true);\n    })\n\n    // Clean up the underneath rects\n    svg_rnn.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n\n    // Show all edges\n    let unimportantEdges = svg_rnn.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== actPoolDetailViewLayerIndex;\n      })\n      .style('visibility', null);\n    \n    // Recover control UI\n    disableControl = false;\n\n    // Show legends if in detailed mode\n    svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg_rnn.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg_rnn.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Also dehighlight the edge\n    let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n\n    // Remove the overlay rect\n    svg_rnn.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg_rnn.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg_rnn.selectAll('defs.overlay-gradient').remove();\n        svg_rnn.select('.input-annotation').classed('hidden', false);\n      });\n\n    // Turn the fade out nodes back\n    svg_rnn.select(`g#rnn-layer-group-${layerIndex}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        d3.select(sg[si])\n          .style('pointer-events', 'all');\n    });\n\n    svg_rnn.select(`g#rnn-layer-group-${layerIndex - 1}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        // Recover the old events\n        d3.select(sg[si])\n          .style('pointer-events', 'all')\n          .on('mouseover', nodeMouseOverHandler)\n          .on('mouseleave', nodeMouseLeaveHandler)\n          .on('click', nodeClickHandler);\n    });\n\n    // Deselect the node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n\n    actPoolDetailViewLayerIndex = -1;\n  } \n\n  const prepareToEnterIntermediateView = (d, g, i, curLayerIndex) => {\n    isInIntermediateView = true;\n    // Hide all legends\n    svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg_rnn.selectAll('.input-legend').classed('hidden', true);\n    svg_rnn.selectAll('.output-legend').classed('hidden', true);\n\n    // Hide the input annotation\n    svg_rnn.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Highlight the previous layer and this node\n    svg_rnn.select(`g#rnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 2);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 2);\n    \n    // Disable control panel UI\n    // d3.select('#level-select').property('disabled', true);\n    // d3.selectAll('.image-container')\n    //   .style('cursor', 'not-allowed')\n    //   .on('mouseclick', () => {});\n    disableControl = true;\n    \n    // Allow infinite animation loop\n    shouldIntermediateAnimateStore_rnn.set(true);\n\n    // Highlight the labels\n    svg_rnn.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', '800');\n    \n    // Register a handler on the svg element so user can click empty space to quit\n    // the intermediate view\n    d3.select('#rnn-svg')\n      .on('click', emptySpaceClicked);\n  }\n\n  const enterDetailView = (curLayerIndex, i) => {\n    isInActPoolDetailView = true;\n    actPoolDetailViewNodeIndex = i;\n    actPoolDetailViewLayerIndex = curLayerIndex;\n\n    // Dynamically position the detail view\n    let wholeSvg = d3.select('#rnn-svg');\n    let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n    let svgWidth = +wholeSvg.style('width').replace('px', '');\n    let detailViewTop = 100 + svgYMid - 260 / 2;\n\n    let posX = 0;\n    // maybe 2 for rnn\n    if (curLayerIndex > 2) {\n      posX = nodeCoordinate[curLayerIndex - 1][0].x + 50;\n      posX = posX / 2 - 500 / 2;\n    } else {\n      posX = (svgWidth - nodeCoordinate[curLayerIndex][0].x - nodeLength) / 2;\n      posX = nodeCoordinate[curLayerIndex][0].x + nodeLength + posX - 500 / 2;\n\n    }\n\n    const detailview = document.getElementById('detailview');\n    detailview.style.top = `${detailViewTop}px`;\n    detailview.style.left = `${posX}px`;\n    detailview.style.position = 'absolute';\n\n    // Hide all edges\n    let unimportantEdges = svg_rnn.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== curLayerIndex;\n      })\n      .style('visibility', 'hidden');\n    \n    // Disable UI\n    disableControl = true;\n    \n    // Hide input annotaitons\n    svg_rnn.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Hide legends\n    svg_rnn.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg_rnn.selectAll('.input-legend').classed('hidden', true);\n    svg_rnn.selectAll('.output-legend').classed('hidden', true);\n    svg_rnn.select(`#${layerLegendDict[curLayerIndex][selectedScaleLevel]}`)\n      .classed('hidden', false);\n\n    // Add overlay rects\n    let leftX = nodeCoordinate[curLayerIndex - 1][i].x;\n    // +5 to cover the detailed mode long label\n    let rightStart = nodeCoordinate[curLayerIndex][i].x + nodeLength + 5;\n    // embbedingLength for embbedding layer\n    if (curLayerIndex ===1){\n      rightStart = rightStart -nodeLength + embbedingLength;\n    }\n\n    // Compute the left and right overlay rect width\n    let rightWidth = width - rightStart - overlayRectOffset / 2;\n    let leftWidth = leftX - nodeCoordinate[0][0].x;\n\n    // The overlay rects should be symmetric\n    if (rightWidth > leftWidth) {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 1}];\n      addOverlayGradient('overlay-gradient-right', stops);\n      \n      let leftEndOpacity = 0.85 + (0.95 - 0.85) * (leftWidth / rightWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: leftEndOpacity},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n    } else {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 1},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n\n      let rightEndOpacity = 0.85 + (0.95 - 0.85) * (rightWidth / leftWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: rightEndOpacity}];\n      addOverlayGradient('overlay-gradient-right', stops);\n    }\n    \n    addOverlayRect('overlay-gradient-right',\n      rightStart + overlayRectOffset / 2 + 0.5,\n      0, rightWidth, height + svgPaddings.top);\n    \n    addOverlayRect('overlay-gradient-left',\n      nodeCoordinate[0][0].x - overlayRectOffset / 2,\n      0, leftWidth, height + svgPaddings.top);\n\n    svg_rnn.selectAll('rect.overlay')\n      .on('click', emptySpaceClicked);\n    \n    // Add underneath rectangles\n    let underGroup = svg_rnn.select('g.underneath');\n    let padding = 1;\n    for (let n = 0; n < rnn[curLayerIndex - 1].length; n++) {\n      underGroup.append('rect')\n        .attr('class', 'underneath-gateway')\n        .attr('id', `underneath-gateway-${n}`)\n        .attr('x', nodeCoordinate[curLayerIndex - 1][n].x - padding)\n        .attr('y', nodeCoordinate[curLayerIndex - 1][n].y - padding)\n        .attr('width', (1 * nodeLength + 1*embbedingLength + hSpaceAroundGap_rnn) + 2 * padding)\n        .attr('height', inputNodeHeight + 2 * padding)\n        .attr('rx', 10)\n        .style('fill', 'rgba(160, 160, 160, 0.3)')\n        .style('opacity', 0);\n      \n      // Update the event functions for these two layers\n      svg_rnn.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .style('pointer-events', 'all')\n        .style('cursor', 'pointer')\n        .on('mouseover', actPoolDetailViewPreNodeMouseOverHandler)\n        .on('mouseleave', actPoolDetailViewPreNodeMouseLeaveHandler)\n        .on('click', actPoolDetailViewPreNodeClickHandler);\n    }\n    underGroup.lower();\n\n    // Highlight the selcted pair\n    underGroup.select(`#underneath-gateway-${i}`)\n      .style('opacity', 1);\n  }\n\n  const actPoolDetailViewPreNodeMouseOverHandler = (d, i, g) => {\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    \n    // Highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg_rnn.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', false);\n  }\n\n  const actPoolDetailViewPreNodeMouseLeaveHandler = (d, i, g) => {\n    // De-highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n\n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n    \n    // De-highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', true);\n    \n    // De-highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg_rnn.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n  }\n\n  const actPoolDetailViewPreNodeClickHandler = (d, i, g) => {\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n\n    // Click the pre-layer node in detail view has the same effect as clicking\n    // the cur-layer node, which is to open a new detail view window\n    svg_rnn.select(`g#layer-${layerIndex + 1}-node-${nodeIndex}`)\n      .node()\n      .dispatchEvent(new Event('click'));\n  }\n\n  const intermediateNodeMouseOverHandler = (d, i, g) => {\n    if (detailedViewNum !== undefined) { return; }\n    svg_rnn.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 1);\n  }\n\n  const intermediateNodeMouseLeaveHandler = (d, i, g) => {\n    // return;\n    if (detailedViewNum !== undefined) { return; }\n    svg_rnn.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 0);\n  }\n\n  const intermediateNodeClicked = (d, i, g, selectedI, curLayerIndex) => {\n    d3.event.stopPropagation();\n    isExitedFromCollapse = false;\n    // Use this event to trigger the detailed view\n    if (detailedViewNum === d.index) {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      detailedViewNum = undefined;\n      svg_rnn.select(`rect#underneath-gateway-${d.index}`)\n        .style('opacity', 0);\n    } \n    // We need to show a new detailed view (two cases: if we need to close the\n    // old detailed view or not)\n    else {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = d.index;\n      let inputMatrix = d.output;\n      let kernelMatrix = d.outputLinks[selectedI].weight;\n      // let interMatrix = singleConv(inputMatrix, kernelMatrix);\n      let colorScale = layerColorScales.conv;\n\n      // Compute the color range\n      let rangePre = rnnLayerRanges[selectedScaleLevel][curLayerIndex - 1];\n      let rangeCur = rnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      let range = Math.max(rangePre, rangeCur);\n\n      // User triggers a different detailed view\n      if (detailedViewNum !== undefined) {\n        // Change the underneath highlight\n        svg_rnn.select(`rect#underneath-gateway-${detailedViewNum}`)\n          .style('opacity', 0);\n        svg_rnn.select(`rect#underneath-gateway-${d.index}`)\n          .style('opacity', 1);\n      }\n      \n      // Dynamically position the detail view\n      let wholeSvg = d3.select('#rnn-svg');\n      let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n      let svgWidth = +wholeSvg.style('width').replace('px', '');\n      let detailViewTop = 100 + svgYMid - 250 / 2;\n      let positionX = intermediateLayerPosition[Object.keys(layerIndexDict)[curLayerIndex]];\n\n      let posX = 0;\n      if (curLayerIndex > 6) {\n        posX = (positionX - svgPaddings.left) / 2;\n        posX = svgPaddings.left + posX - 486 / 2;\n      } else {\n        posX = (svgWidth + svgPaddings.right - positionX) / 2;\n        posX = positionX + posX - 486 / 2;\n      }\n\n      const detailview = document.getElementById('detailview');\n      detailview.style.top = `${detailViewTop}px`;\n      detailview.style.left = `${posX}px`;\n      detailview.style.position = 'absolute';\n\n      detailedViewNum = d.index;\n\n      // Send the currently used color range to detailed view\n      nodeData.colorRange = range;\n      nodeData.inputIsInputLayer = curLayerIndex <= 1;\n    }\n  }\n\n  const nodeClickHandler = (d, i, g) => {\n    d3.event.stopPropagation();\n    let nodeIndex = d.index;\n\n    // Record the current clicked node\n    selectedNode.layerName = d.layerName;\n    selectedNode.index = d.index;\n    selectedNode.data = d;\n    selectedNode.domI = i;\n    selectedNode.domG = g;\n\n    // Record data for detailed view.\n    if (d.type ==='embedding'||d.type === 'lstm') {\n      let data = [];\n      for (let j = 0; j < d.inputLinks.length; j++) {\n        data.push({\n          input: d.inputLinks[j].source.output,\n          kernel: d.inputLinks[j].weight,\n          output: d.inputLinks[j].dest.output,\n        })\n      }\n      let curLayerIndex = layerIndexDict[d.layerName];\n      data.colorRange = rnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      data.isInputInputLayer = curLayerIndex <= 1;\n      nodeData = data;\n    }\n\n    let curLayerIndex = layerIndexDict[d.layerName];\n\n    if (d.type === 'embedding'\n      //  || d.type === 'lstm'\n    ) {\n      isExitedFromDetailedView = false;\n      if (!isInActPoolDetailView) {\n        // Enter the act pool detail view\n        enterDetailView(curLayerIndex, d.index);\n      } else {\n        if (d.index === actPoolDetailViewNodeIndex) {\n          // Quit the act pool detail view\n          quitActPoolDetailView();\n        } \n        // else {\n        //   // Switch the detail view input to the new clicked pair\n\n        //   // Remove the previous selection effect\n        //   svg_rnn.select(`g#layer-${curLayerIndex}-node-${actPoolDetailViewNodeIndex}`)\n        //     .select('rect.bounding')\n        //     .classed('hidden', true);\n\n        //   svg_rnn.select(`g#layer-${curLayerIndex - 1}-node-${actPoolDetailViewNodeIndex}`)\n        //     .select('rect.bounding')\n        //     .classed('hidden', true);\n          \n        //   let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n      \n        //   edgeGroup.selectAll(`path.edge-${curLayerIndex}-${actPoolDetailViewNodeIndex}`)\n        //     .transition()\n        //     .ease(d3.easeCubicOut)\n        //     .duration(200)\n        //     .style('stroke', edgeInitColor)\n        //     .style('stroke-width', edgeStrokeWidth)\n        //     .style('opacity', edgeOpacity);\n          \n        //   let underGroup = svg_rnn.select('g.underneath');\n        //   underGroup.select(`#underneath-gateway-${actPoolDetailViewNodeIndex}`)\n        //     .style('opacity', 0);\n        \n        //   // Add selection effect on the new selected pair\n        //   svg_rnn.select(`g#layer-${curLayerIndex}-node-${nodeIndex}`)\n        //     .select('rect.bounding')\n        //     .classed('hidden', false);\n\n        //   svg_rnn.select(`g#layer-${curLayerIndex - 1}-node-${nodeIndex}`)\n        //     .select('rect.bounding')\n        //     .classed('hidden', false);\n\n        //   edgeGroup.selectAll(`path.edge-${curLayerIndex}-${nodeIndex}`)\n        //     .raise()\n        //     .transition()\n        //     .ease(d3.easeCubicInOut)\n        //     .duration(400)\n        //     .style('stroke', edgeHoverColor)\n        //     .style('stroke-width', '1')\n        //     .style('opacity', 1);\n\n        //   underGroup.select(`#underneath-gateway-${nodeIndex}`)\n        //     .style('opacity', 1);\n\n        //   actPoolDetailViewNodeIndex = nodeIndex;\n        // }\n      }\n    }\n\n    // Enter the second view (layer-view) when user clicks a conv node\n    if ((\n      // d.type === 'lstm' || \n      d.layerName === 'dense_Dense1') && !isInIntermediateView) {\n      prepareToEnterIntermediateView(d, g, nodeIndex, curLayerIndex);\n\n      if (d.layerName === 'dense_Dense1'){\n        drawDense(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n      else if (d.layerName === 'lstm_LSTM1'){\n        // // todo:\n        // drawLSTM(curLayerIndex, d, nodeIndex, width, height,\n        //   intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n        //   intermediateNodeClicked);\n      }\n    }\n    // Quit the layerview\n    else if ((\n      // d.type === 'lstm' || \n      d.layerName === 'dense_Dense1') && isInIntermediateView) {\n      quitIntermediateView(curLayerIndex, g, i);\n    }\n  }\n\n  const nodeMouseOverHandler = (d, i, g) => {\n    // if (isInIntermediateView || isInActPoolDetailView) { return; }\n    if (isInIntermediateView) { return; }\n\n    // Highlight the edgesr\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    \n    // Highlight source's border\n    if (d.inputLinks.length === 1) {\n      let link = d.inputLinks[0];\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    } else {\n      svg_rnn.select(`g#rnn-layer-group-${layerIndex - 1}`)\n        .selectAll('g.node-group')\n        .selectAll('rect.bounding')\n        .classed('hidden', false);\n    }\n\n    // Highlight the output text\n    if (d.layerName === '\"dense_Dense1\"') {\n      d3.select(g[i])\n        .select('.output-text')\n        .style('opacity', 0.8)\n        .style('text-decoration', 'underline');\n    }\n\n    /* Use the following commented code if we have non-linear model\n    d.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    });\n    */\n  }\n\n  const nodeMouseLeaveHandler = (d, i, g) => {\n    // Screenshot\n    // return;\n\n    if (isInIntermediateView) { return; }\n    \n    // Keep the highlight if user has clicked\n    if (isInActPoolDetailView || (\n      d.layerName !== selectedNode.layerName ||\n      d.index !== selectedNode.index)){\n      let layerIndex = layerIndexDict[d.layerName];\n      let nodeIndex = d.index;\n      let edgeGroup = svg_rnn.select('g.rnn-group').select('g.edge-group');\n      \n      edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n        .transition()\n        .ease(d3.easeCubicOut)\n        .duration(200)\n        .style('stroke', edgeInitColor)\n        .style('stroke-width',  d =>d.targetLayerIndex ===2 ? edgeStrokeWidth:edgeStrokeWidth*4)\n        .style('opacity', edgeOpacity);\n      \n      if (d.type !== 'dense') {\n        d3.select(g[i]).select('rect.bounding').classed('hidden', true);\n      }\n\n      if (d.inputLinks.length === 1) {\n        let link = d.inputLinks[0];\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      } else {\n        svg_rnn.select(`g#rnn-layer-group-${layerIndex - 1}`)\n          .selectAll('g.node-group')\n          .selectAll('rect.bounding')\n          .classed('hidden', d => d.layerName !== selectedNode.layerName ||\n            d.index !== selectedNode.index);\n      }\n\n      // Dehighlight the output text\n      if (d.layerName === 'dense_Dense1') {\n        d3.select(g[i])\n          .select('.output-text')\n          .style('fill', 'black')\n          .style('opacity', 0.5)\n          .style('text-decoration', 'none');\n      }\n\n      /* Use the following commented code if we have non-linear model\n      d.inputLinks.forEach(link => {\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        hoverInfoStore_rnn.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      });\n      */\n    }\n  }\n\n  const directPredict = (input, model) => {\n    if (predictor) {\n      // await predictor.predictResult(input, model).\n            // then(res => result = res);\n\n      let result = predictor.predictResult(input, model);\n\n      console.log('Direct Result: Inference result (0 - negative; 1 - positive): ' +\n                    result.score.toFixed(6) +\n                  ' (elapsed: ' + result.elapsed.toFixed(2) + ' ms)');\n    } else {\n      console.log('something went wrong with predictor');\n    }\n\n  }\n\n  onMount(async () => {\n      // Create RNN\n      console.log(`-----------Creating RNN---------------`);\n      overview = d3.select(rnnOverviewComponent);\n      width = Number(overview.style('width').replace('px', '')) -\n        svgPaddings.left - svgPaddings.right;\n\n      wholeSvg_rnn = d3.select(rnnOverviewComponent)\n        .select('#rnn-svg');\n      svg_rnn = wholeSvg_rnn.append('g')\n        .attr('class','main-svg')\n        .attr('transform',`translate(${svgPaddings.left}, 0)`);\n\n      svgStore_rnn.set(svg_rnn);\n\n      // width = Number(wholeSvg_rnn.style('width').replace('px', '')) -\n      //   svgPaddings.left - svgPaddings.right;\n      height = Number(wholeSvg_rnn.style('height').replace('px', '')) -\n        svgPaddings.top - svgPaddings.bottom;\n\n      let rnnGroup = svg_rnn.append('g')\n        .attr('class','rnn-group');\n      \n      let underGroup_rnn = svg_rnn.append('g')\n        .attr('class', 'underneath');\n\n      let svgYMid_rnn = +wholeSvg_rnn.style('height').replace('px','') / 2;\n\n      detailedViewAbsCoords = {\n        1 : [600, 100 + svgYMid_rnn - 220 / 2, 490, 290],\n        2: [500, 100 + svgYMid_rnn - 220 / 2, 490, 290],\n        // 3 : [700, 100 + svgYMid - 220 / 2, 490, 290],\n        // 4: [600, 100 + svgYMid - 220 / 2, 490, 290],\n        // 5: [650, 100 + svgYMid - 220 / 2, 490, 290],\n        // 6 : [850, 100 + svgYMid - 220 / 2, 490, 290],\n        // 7 : [100, 100 + svgYMid - 220 / 2, 490, 290],\n        // 8 : [60, 100 + svgYMid - 220 / 2, 490, 290],\n        // 9 : [200, 100 + svgYMid - 220 / 2, 490, 290],\n        // 10 : [300, 100 + svgYMid - 220 / 2, 490, 290],\n      }\n\n      // Define global arrow marker end\n      svg_rnn.append(\"defs\")\n        .append(\"marker\")\n        .attr(\"id\", 'marker')\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 6)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .style('stroke-width', 1.2)\n        .style('fill', 'gray')\n        .style('stroke', 'gray')\n        .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n      // Alternative arrow head style for non-interactive annotation\n      svg_rnn.append(\"defs\")\n        .append(\"marker\")\n        .attr(\"id\", 'marker-alt')\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        .attr(\"refX\", 6)\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 6)\n        .attr(\"markerHeight\", 6)\n        .attr(\"orient\", \"auto\")\n        .append(\"path\")\n        .style('fill', 'none')\n        .style('stroke', 'gray')\n        .style('stroke-width', 2)\n        .attr(\"d\", \"M-5,-10L10,0L-5,10\");\n\n      predictor = await new SentimentPredictor().init(LOCAL_URLS);\n      model_lstm = predictor.model;\n      console.log(\"The rnn model is: \", model_lstm);\n\n      // check the result first\n      directPredict(`${exampleReviews[selectedReview]}`, model_lstm);\n\n      console.time('Construct rnn');\n      rnn = await predictor.constructNN(`${exampleReviews[selectedReview]}`, model_lstm);\n      console.timeEnd('Construct rnn');\n      // isRNNloaded = true;\n      // // Ignore the rawInput layer for now, because too many <pad> node in input layer will \n      // // cause the exploration of edges, which will cost performance loss in interface\n      // rnn.rawInput = rnn[0];\n      // rnn[0] = rnn.nonPadInput;\n      let lstm = rnn[rnn.length -2];\n      rnn.lstm = lstm;\n      rnnStore.set(rnn);\n      console.log('rnn layers are: ', rnn);\n\n      reviewArray = predictor.inputArray;\n      reviewArrayStore.set(reviewArray);\n\n      inputDim = model_lstm.layers[0].inputDim;\n      updateRNNLayerRanges(inputDim);\n      console.log(\"rnn layer ranges and MinMax are: \", \n        rnnLayerRanges, rnnLayerMinMax);\n\n      // Create and draw the RNN view\n      drawRNN(width, height, rnnGroup, nodeMouseOverHandler, \n      nodeMouseLeaveHandler, nodeClickHandler);\n  });\n\n\n  function handleExitFromDetiledConvView(event) {\n    if (event.detail.text) {\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${selectedNodeIndex}`)\n        .style('opacity', 0);\n      selectedNodeIndex = -1; \n    }\n  }\n\n  function handleExitFromDetiledEmbeddingView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledSigmoidView(event) {\n    sigmoidDetailViewInfo.show = false;\n    sigmoidDetailViewStore_rnn.set(sigmoidDetailViewInfo);\n  }\n</script>\n\n<style>\n  .rnnOverview {\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n\n  .control-container {\n    padding: 5px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .right-control {\n    display: flex;\n  }\n\n  .left-control {\n    display: flex;\n    align-items: center;\n  }\n\n  .control > .select > #level-select {\n    padding-left: 2em;\n    padding-right: 2em;\n  }\n\n  #example-select {\n    padding-left: 2em;\n    padding-right: 2em;\n  }\n\n  .textarea {\n    width:400px;\n    min-height:48px;\n    max-height:240;\n    _height:120px;\n    margin-left:auto;\n    margin-right:auto;\n    outline:0;\n    border:1pxsolid#a0b3d6;\n    font-size:12px;\n    line-height:24px;\n    padding:2px;\n    word-wrap:break-word;\n    overflow-x:hidden;\n    overflow-y:auto;\n\n    border-color:rgba(82,168,236,0.8);\n    box-shadow:inset01px3pxrgba(0,0,0,0.1),008pxrgba(82,168,236,0.6);\n  }\n\n  .rnn {\n    width: 100%;\n    padding: 0;\n    background: var(--light-gray);\n    display: flex;\n  }\n\n  .spinner-item {\n\t  min-width: 250px;\n\t  min-height: 250px;\n\t  display: flex;\n\t  justify-content: center;\n\t  align-items: center;\n    position: absolute;\n    top: 50%;\n    left:50%;\n    transform:translate(-50%,-50%);\n  }\n\n  svg {\n    margin: 0 auto;\n    min-height: 500px;\n    max-height: 1200px;\n    height: calc(100vh - 100px);\n    width: 100vw;\n    display:flex\n  }\n\n  .is-very-small {\n    font-size: 12px;\n  }\n\n  #detailed-button {\n    margin-right: 10px;\n    color: #dbdbdb;\n    transition: border-color 300ms ease-in-out, color 200ms ease-in-out;\n  }\n\n  #detailed-button.is-activated, #detailed-button.is-activated:hover {\n    color: #3273dc;\n    border-color: #3273dc;\n  }\n\n  #detailed-button:hover {\n    color: #b5b5b5;\n  }\n\n  #hover-label {\n    transition: opacity 300ms ease-in-out;\n    text-overflow: ellipsis;\n    pointer-events: none;\n    margin-left: 5px;\n  }\n\n  .review {\n    padding: 5px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  #review-text {\n    font-size: 100%;\n    width: 600%;\n    height: 50px;\n  }\n\n  :global(canvas) {\n    image-rendering: crisp-edges;\n  }\n\n  :global(.layer-label, .layer-detailed-label, .layer-intermediate-label) {\n    font-size: 12px;\n    opacity: 0.8;\n    text-anchor: middle;\n  }\n\n  :global(.colorLegend) {\n    font-size: 10px;\n  }\n\n  :global(.legend) {\n    transition: opacity 400ms ease-in-out;\n  }\n\n  :global(.legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.legend text, .legend line, .legend path) {\n    opacity: 0.7;\n  }\n\n  :global(.legend#output-legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.hidden) {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  :global(.very-strong) {\n    stroke-width: 3px;\n  }\n\n  :global(.bounding, .edge, .edge-group, foreignObject, .bounding-flatten,\n    .underneath-gateway, .input-annotation) {\n    transition: opacity 300ms ease-in-out;\n  }\n\n  :global(rect.bounding) {\n    transition: stroke-width 800ms ease-in-out, opacity 300ms ease-in-out;\n  }\n\n  :global(.annotation-text) {\n    pointer-events: none;\n    font-size: 10px;\n    font-style: italic;\n    fill: gray;\n  }\n\n  /* Change the cursor style on the detailed view input and output matrices */\n  :global(rect.square) {\n    cursor: crosshair;\n  }\n\n  :global(.animation-control-button) {\n    font-family: FontAwesome;\n    opacity: 0.8;\n    cursor: pointer;\n  }\n\n</style>\n\n<div class=\"rnnOverview\"\n  bind:this={rnnOverviewComponent}>\n\n  <div class=\"control-container\">\n\n    <div class=\"left-control\">  \n\n      <div class=\"control is-very-small has-icons-left\"\n        title=\"Change input using different examples\">\n          <span class=\"icon is-left\">\n            <i class=\"fas fa-palette\"></i>\n          </span>\n\n          <div class=\"select\">\n            <select bind:value=\"{selectedReview}\"\n              disabled={disableControl}\n              id=\"example-select\" \n              class=\"form-control\" \n              on:change= \"{disableControl ? '' : reviewOptionClicked}\">\n              <!-- <option value=\"empty\"> Please choose one example</option> -->\n              <option value=\"positive\">Positive example</option>\n              <option value=\"negative\">Negative example</option>\n              <option value=\"input\">Input your review</option>\n            </select>\n          </div>      \n      </div>\n\n      <button class=\"button is-very-small is-link is-light\"\n        id=\"hover-label\"\n        style=\"opacity:{hoverInfo_rnn.show ? 1 : 0}\">\n        <span class=\"icon\" style=\"margin-right: 5px;\">\n          <i class=\"fas fa-crosshairs \"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          {hoverInfo_rnn.text}\n        </span>\n      </button>\n\n    </div>\n\n    <div class=\"right-control\">\n\n      <button class=\"button is-very-small\"\n        id=\"detailed-button\"\n        disabled={disableControl}\n        class:is-activated={detailedMode}\n        on:click={detailedButtonClicked}>\n        <span class=\"icon\">\n          <i class=\"fas fa-eye\"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          Show detail\n        </span>\n      </button>\n\n      <div class=\"control is-very-small has-icons-left\"\n        title=\"Change color scale range\">\n        <span class=\"icon is-left\">\n          <i class=\"fas fa-layer-group\"></i>\n        </span>\n\n        <div class=\"select\">\n          <select bind:value={selectedScaleLevel} id=\"level-select\"\n            disabled={disableControl}>\n            <option value=\"local\">Unit</option>\n            <option value=\"module\">Module</option>\n            <option value=\"global\">Global</option>\n          </select>\n        </div>\n      </div>\n\n    </div>\n    \n  </div>\n\n  <div class=\"review\">\n    <div \n      bind:textContent={reviewContent} \n      class=\"textarea\" id=\"review-content\" \n      disabled={disableControl}\n      contenteditable=\"false\" \n      on:focus=\"{focusReviewContent}\"\n      on:blur=\"{reviewContentChanged}\">\n        {exampleReviews[selectedReview]}\n    </div>\n    <!-- <textarea id=\"review-text\" on:blur=\"{disableControl ? '' : reviewOptionClicked}\" maxlength = \"100o\">{exampleReviews[selectedReview]}</textarea> -->\n  </div>\n\n  <div class=\"rnn\" id=\"rnnView\">\n    {#if  !rnn}\n      <div class=\"spinner-item\" title=\"Jumper\">\n        <Jumper size=\"120\" color=\"#0abab5\" />\n      </div>\n    {/if}\n    <svg id=\"rnn-svg\"></svg>\n  </div>\n\n</div>\n\n<div id='detailview'>\n  {#if selectedNode.data && selectedNode.data.type === 'embedding'}\n    <EmbeddingView on:message={handleExitFromDetiledEmbeddingView} input={[nodeData[0].input]} \n                    kernel={nodeData[0].kernel} output={[nodeData[0].output]}\n                    dataRange={nodeData.colorRange}\n                    isExited={isExitedFromDetailedView}/>\n  {:else if sigmoidDetailViewInfo.show}\n    <SigmoidView logits={sigmoidDetailViewInfo.logits}\n                 logitColors={sigmoidDetailViewInfo.logitColors}\n                 selectedI={sigmoidDetailViewInfo.selectedI}\n                 highlightI={sigmoidDetailViewInfo.highlightI}\n                 outputName={sigmoidDetailViewInfo.outputName}\n                 outputValue={sigmoidDetailViewInfo.outputValue}\n                 startAnimation={sigmoidDetailViewInfo.startAnimation}\n                 on:xClicked={handleExitFromDetiledSigmoidView}\n                 on:mouseOver={sigmoidDetailViewMouseOverHandler}\n                 on:mouseLeave={sigmoidDetailViewMouseLeaveHandler}/>\n  {/if}\n</div>"
  ],
  "names": [],
  "mappings": "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"
}